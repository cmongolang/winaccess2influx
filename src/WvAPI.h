#pragma once
#include <windows.h>

#define _WVAPI__INCLUDED_
#pragma pack( push, EnterWvAPI )
#pragma pack( 1 )

//
//   Interface version ID
//
#define WVAPI_MAJOR_REV 14
#define WVAPI_MINOR_REV 0
#define W_CLIENT

//
//   Interface return codes

#define WV_SUCCESS                                0
#define WV_VERSION_MISMATCH                       1
#define WV_OBSOLETE_FUNCTION                      2
#define WV_TIMER_ERROR1                           3
#define WV_TIMER_ERROR2                           4
#define WV_NOT_INITIALIZED                        5
#define WV_UNABLE_TO_INITIALIZE_SOCKETS           6
#define WV_UNABLE_TO_LOAD_WVSTRINGS_DLL           7
#define WV_ALREADY_STARTED                        8
#define WV_ALREADY_CONNECTED                      9
#define WV_RESOURCE_LOCKED                       10
#define WV_NO_MORE_CONNECTIONS                   11
#define WV_WINACCESS_OPTION_NOT_ENABLED          12
#define WV_INVALID_USERNAME_OR_PASSWORD          13
#define WV_COULD_NOT_GET_ENABLED_OPTION_LIST     14
#define WV_WINSOCK_OPEN_ERROR                    15
#define WV_WINSOCK_SEND_ERROR                    16
#define WV_WINSOCK_RECEIVE_ERROR                 17
#define WV_WINSOCK_CLOSE_ERROR                   18
#define WV_WINSOCK_ERROR                         19
#define WV_INVALID_CONNECT_ID                    20
#define WV_INVALID_PARAMETER_ID                  21
#define WV_INVALID_WAVEFORM_ID                   22
#define WV_INVALID_UNITS                         23
#define WV_INVALID_ENABLE_STATE                  24
#define WV_INVALID_ALARM_STATE                   25
#define WV_INVALID_ALARM_GRADE                   26
#define WV_INVALID_DEVICE_STATUS                 27
#define WV_INVALID_VALUE_TIME_STAMP              28
#define WV_INVALID_ALARM_TIME_STAMP              29
#define WV_INVALID_ERROR_CODE                    30
#define WV_INVALID_TIME_STAMP                    31
#define WV_INVALID_ARCHIVE_STATE                 32
#define WV_INVALID_TREND_RESOLUTION              33
#define WV_INVALID_TREND_HOURS                   34
#define WV_INVALID_COLOR                         35
#define WV_BAD_ALARM_LIMITS                      40
#define WV_BAD_NUMBER_OF_SAMPLES_REQUESTED       41
#define WV_BAD_NUMBER_OF_SAMPLES_RETURNED        42
#define WV_DISCONNECT_TIMEOUT                    50
#define WV_SETUP_RESOURCE_LOCKED                 51
#define WV_WAITING_FOR_BED_SETUP_TO_BE_COMPLETE  70
#define WV_NO_CONNECTION_WITH_WAVES              71
#define WV_NO_CONNECTION_WITH_PARAMS             72
#define WV_INPUT_PARAMETER_ERROR                100
#define WV_NULL_PARAMETER1                      101
#define WV_NULL_PARAMETER2                      102
#define WV_NULL_PARAMETER3                      103
#define WV_NULL_PARAMETER4                      104
#define WV_NULL_PARAMETER5                      105
#define WV_NULL_PARAMETER6                      106
#define WV_NULL_PARAMETER7                      107
#define WV_NULL_PARAMETER8                      108
#define WV_NULL_POINTER                         109
#define WV_MEMORY_ALLOCATION_ERROR              200
#define WV_TOO_MANY_BEDS                        201
#define WV_TOO_MANY_PARAMETERS                  202
#define WV_TOO_MANY_WAVEFORMS                   203
#define WV_TOO_MANY_SAMPLES                     204
#define WV_DATA_NOT_AVAILABLE                   210
#define WV_BED_NOT_AVAILABLE                    211
#define WV_PARAMETER_NOT_AVAILABLE              212
#define WV_WAVEFORM_NOT_AVAILABLE               213
#define WV_PATIENT_DISCHARGED                   214
#define WV_BED_IN_STANDBY                       215
#define WV_ACCESS_DENIED                        216
#define WV_NOT_SUPPORTED_BY_MONITOR             217
#define WV_SDC_OPTION_NOT_SUPPORTED             218
#define WV_NOT_SUPPORTED_SDC_ONLY_MONITOR       219
#define WV_NOT_SUPPORTED_INFINITY_MONITOR       220
#define WV_FUNCTION_NOT_AVAILABLE               301
#define WV_NO_BED_DESCRIPTIONS_AVAILABLE        321
#define WV_END_OF_BED_DESCRIPTIONS              322
#define WV_NO_PARAMETER_DESCRIPTIONS_AVAILABLE  331
#define WV_END_OF_PARAMETER_DESCRIPTIONS        332
#define WV_BUFFER_TOO_SMALL                     401
#define WV_UNABLE_TO_RESOLVE_SERVER_NAME        501
#define WV_UNABLE_TO_RESOLVE_SERVER_IP_ADDRESS  502
#define WV_FILEACCESS_OPTION_NOT_ENABLED        701
#define WV_CONTROL_NOT_REQUESTED                801
#define WV_CONTROL_REPLY_FAILED                 802       /* failed somewhere during transfer */
#define WV_CONTROL_REPLY_NAKD                   803
#define WV_CONTROL_NOT_ALLOWED                  804
#define WV_UNKNOWN_REPLY                        805
#define WV_UNKNOWN_REQUEST                      806
#define WV_CONTROL_FAILED                       807
#define WV_REQUEST_IN_PROGRESS                  808
#define WV_PARTIAL_FAIL                         809
#define WV_PATIENT_ID_CHANGE_NOT_ALLOWED        810
#define WV_PATIENT_NAME_CHANGE_NOT_ALLOWED      811
#define WV_INVALID_RACE                         812
#define WV_INVALID_SEX                          813
#define WV_INVALID_BIRTHDATE                    814
#define WV_INVALID_ADMITDATE                    815
#define WV_HEIGHT_UNIT_CHANGE_NOT_ALLOWED       816
#define WV_WEIGHT_UNIT_CHANGE_NOT_ALLOWED       817
#define WV_HEIGHT_OUT_OF_RANGE                  818
#define WV_WEIGHT_OUT_OF_RANGE                  819
#define WV_NO_CHANGE_REQUESTED                  820
#define WV_FILE_OPEN_ERROR                      840
#define WV_FILE_WRITE_ERROR                     841
#define WV_SOFTWARE_ERROR                       842
#define WV_PARAMETER1_TOO_LONG                  843
#define WV_PARAMETER2_TOO_LONG                  844
#define WV_PARAMETER3_TOO_LONG                  845
#define WV_PARAMETER4_TOO_LONG                  846
#define WV_PARAMETER5_TOO_LONG                  847
#define WV_PARAMETER6_TOO_LONG                  848
#define WV_PARAMETER7_TOO_LONG                  849
#define WV_PARAMETER8_TOO_LONG                  850
#define WV_TIMEOUT                              851
#define WV_UNABLE_TO_RETRIEVE_PARAMETERS        860
#define WV_UNABLE_TO_RETRIEVE_WAVEFORMS         861
#define WV_UNABLE_TO_RETRIEVE_UOMS              862
#define WV_UNABLE_TO_RETRIEVE_PBOX_DATA         863
#define WV_UNABLE_TO_RETRIEVE_ITEM_CONVERSIONS  864
#define WV_UNABLE_TO_RETRIEVE_ACCEPTABLE_UOMS   865

//
//   Sizing constants
//
#define WV_MAX_MONITORING_UNITS           32
#define WV_MAX_BEDS_PER_SERVER           256
#define WV_MAX_PARAMETERS_PER_BED        500
#define WV_MAX_WAVEFORMS_PER_BED          64
#define WV_MAX_SAMPLES                  2000
#define WV_MAX_FILTERS                    32
#define WV_MAX_ALARMS_PER_BED            100

// IMPORTANT:  Even though the default request for trend data is 25 hours
// (which is fine for the Infinity Acute Care System patient monitor)
// Infinity Delta Monitors only support 24 hours of trend data.  If you
// request more data than a patient monitor supports you will get a return
// code of WV_INVALID_TREND_HOURS.
#define WV_MAX_TREND_HOURS                25
#define WV_MAX_TREND_MINUTES            WV_MAX_TREND_HOURS * 60
#define WV_8_TREND_HOURS_IN_MINUTES     8 * 60
#define WV_MAX_TREND_SAMPLES_PER_MIN       1
// Internally we support unlimited trends, but for API we will hold a fixed maximum
#define WV_MAX_TREND_PARAMETERS           256
#define WV_MAX_TREND_SAMPLES            WV_MAX_TREND_HOURS * 60 * (WV_MAX_TREND_SAMPLES_PER_MIN) + 1
#define WV_MAX_TIME_CHANGES               24

#define MAX_LOG_FILE_PATH_SIZE           256
#define MAX_LISTS_FILE_PATH_SIZE         256
#define MAX_VITAL_SIGNS_REPORT_SIZE    10000

//
//   Size of strings including null terminator
//
#define WV_PATIENT_NAME_SIZE              26
#define WV_PATIENT_ID_SIZE                20
#define WV_BED_LABEL_SIZE                 20
#define WV_CARE_UNIT_SIZE                 20
#define WV_FILE_NAME_SIZE                 20
#define WV_IP_ADDRESS_SIZE                20
#define WV_MULTICAST_IP_SIZE              20
#define WV_DEVICE_TYPE_SIZE               51
#define WV_DEVICE_STATUS_SIZE              4
#define WV_PHYSICIAN_NAME_SIZE            13
#define WV_HOSTNAME_SIZE                  20
#define WV_HOSPNAME_SIZE                  26
#define WV_SERIAL_NUM_SIZE                51

#define WV_ALARM_MESSAGE_SIZE             100
#define WV_MAX_ALARM_SIGNALS              2

#define WV_LABEL_SIZE                     21
#define WV_VALUE_SIZE                     20
#define WV_MODE_SIZE                      20
#define WV_SCDURATION_SIZE                20
#define WV_SCDURATION_NOT_RECEIVED      _T("Not Received")




#define MAX_TREND_WALL_TIMEOUT  180 // seconds
#define MAX_TREND_ORDER_TIMEOUT 20  // seconds
#define MAX_REMOTE_CONTROL_TIMEOUT  15  // seconds
#define MAX_LOG_TIMEOUT         500

// Client Data Requests
// Note that "params" includes settings and calculations
//           "waves" refers to waveforms
typedef enum
{
    WV_REQUEST_ALARMS_ONLY,
    WV_REQUEST_ALARMS_AND_PARAMS,
    WV_REQUEST_ALARMS_PARAMS_AND_WAVES
} WV_REQUEST_TYPE;

//
//   Parameter ID's
//
typedef enum
{
    WV_PARAM_INVALID,
    WV_PARAM_FIRST,
    WV_PARAM_ECG_HR = WV_PARAM_FIRST,
    WV_PARAM_ECG_PERCENT_PACED,
    WV_PARAM_ECG_ARR,
    WV_PARAM_ECG_PVC_RATE,
    WV_PARAM_ECG_ST_LEAD_I,
    WV_PARAM_ECG_ST_LEAD_II,
    WV_PARAM_ECG_ST_LEAD_III,
    WV_PARAM_ECG_ST_LEAD_AVR,
    WV_PARAM_ECG_ST_LEAD_AVF,
    WV_PARAM_ECG_ST_LEAD_AVL,
    WV_PARAM_ECG_ST_LEAD_V1,
    WV_PARAM_ECG_ST_LEAD_MCL1,
    WV_PARAM_ECG_ST_LEAD_MCL6,
    WV_PARAM_ECG_ST,
    WV_PARAM_ECG_ST_LEAD_V_PRIME,
    WV_PARAM_ECG_ST_LEAD_V2,
    WV_PARAM_ECG_ST_LEAD_V3,
    WV_PARAM_ECG_ST_LEAD_V4,
    WV_PARAM_ECG_ST_LEAD_V5,
    WV_PARAM_ECG_ST_LEAD_V6,
    WV_PARAM_ECG_ST_LEAD_V,
    WV_PARAM_ECG_ST_VM,
    WV_PARAM_ECG_ST_CVM,
    WV_PARAM_ECG_ST_LEAD,
    WV_PARAM_RESP_RR,
    WV_PARAM_ART_PR,
    WV_PARAM_ART_DIASTOLIC,
    WV_PARAM_ART_SYSTOLIC,
    WV_PARAM_ART_MEAN,
    WV_PARAM_PA_DIASTOLIC,
    WV_PARAM_PA_SYSTOLIC,
    WV_PARAM_PA_MEAN,
    WV_PARAM_PA_PWP,
    WV_PARAM_ICP_MEAN,
    WV_PARAM_ICP_CPP,
    WV_PARAM_CVP_MEAN,
    WV_PARAM_LA_MEAN,
    WV_PARAM_RA_MEAN,
    WV_PARAM_LV_DIASTOLIC,
    WV_PARAM_LV_SYSTOLIC,
    WV_PARAM_LV_MEAN,
    WV_PARAM_RV_DIASTOLIC,
    WV_PARAM_RV_SYSTOLIC,
    WV_PARAM_RV_MEAN,
    WV_PARAM_P1_DIASTOLIC,
    WV_PARAM_P1_SYSTOLIC,
    WV_PARAM_P1_MEAN,
    WV_PARAM_P2_DIASTOLIC,
    WV_PARAM_P2_SYSTOLIC,
    WV_PARAM_P2_MEAN,
    WV_PARAM_GP1_DIASTOLIC,
    WV_PARAM_GP1_SYSTOLIC,
    WV_PARAM_GP1_MEAN,
    WV_PARAM_GP2_DIASTOLIC,
    WV_PARAM_GP2_SYSTOLIC,
    WV_PARAM_GP2_MEAN,
    WV_PARAM_P1A_DIASTOLIC,
    WV_PARAM_P1A_SYSTOLIC,
    WV_PARAM_P1A_MEAN,
    WV_PARAM_P1B_DIASTOLIC,
    WV_PARAM_P1B_SYSTOLIC,
    WV_PARAM_P1B_MEAN,
    WV_PARAM_P1C_DIASTOLIC,
    WV_PARAM_P1C_SYSTOLIC,
    WV_PARAM_P1C_MEAN,
    WV_PARAM_P1D_DIASTOLIC,
    WV_PARAM_P1D_SYSTOLIC,
    WV_PARAM_P1D_MEAN,
    WV_PARAM_P2A_DIASTOLIC,
    WV_PARAM_P2A_SYSTOLIC,
    WV_PARAM_P2A_MEAN,
    WV_PARAM_P2B_DIASTOLIC,
    WV_PARAM_P2B_SYSTOLIC,
    WV_PARAM_P2B_MEAN,
    WV_PARAM_P2C_DIASTOLIC,
    WV_PARAM_P2C_SYSTOLIC,
    WV_PARAM_P2C_MEAN,
    WV_PARAM_P2D_DIASTOLIC,
    WV_PARAM_P2D_SYSTOLIC,
    WV_PARAM_P2D_MEAN,
    WV_PARAM_P3A_DIASTOLIC,
    WV_PARAM_P3A_SYSTOLIC,
    WV_PARAM_P3A_MEAN,
    WV_PARAM_P3B_DIASTOLIC,
    WV_PARAM_P3B_SYSTOLIC,
    WV_PARAM_P3B_MEAN,
    WV_PARAM_P3C_DIASTOLIC,
    WV_PARAM_P3C_SYSTOLIC,
    WV_PARAM_P3C_MEAN,
    WV_PARAM_P3D_DIASTOLIC,
    WV_PARAM_P3D_SYSTOLIC,
    WV_PARAM_P3D_MEAN,
    WV_PARAM_SPO2_PR,
    WV_PARAM_SPO2_SATURATION,
    WV_PARAM_TEMP_BASIC_A,
    WV_PARAM_TEMP_BASIC_B,
    WV_PARAM_TEMP_BASIC_DELTA,
    WV_PARAM_TEMP_BASIC_NO_SUBSCRIPT,
    WV_PARAM_TEMP1_A,
    WV_PARAM_TEMP1_B,
    WV_PARAM_TEMP1_DELTA,
    WV_PARAM_TEMP2_A,
    WV_PARAM_TEMP2_B,
    WV_PARAM_TEMP2_DELTA,
    WV_PARAM_TEMP3_A,
    WV_PARAM_TEMP3_B,
    WV_PARAM_TEMP3_DELTA,
    WV_PARAM_NIBP_DIASTOLIC,
    WV_PARAM_NIBP_SYSTOLIC,
    WV_PARAM_NIBP_MEAN,
    WV_PARAM_AIRWAY_CO2_RR,
    WV_PARAM_AIRWAY_CO2_ETCO2,
    WV_PARAM_AIRWAY_CO2_ICO2,
    WV_PARAM_CO_CO,
    WV_PARAM_CO_CO_AVG,
    WV_PARAM_CO_TI,
    WV_PARAM_CO_TB,
    WV_PARAM_CO_ICI,
    WV_PARAM_CO_SVR,
    WV_PARAM_CO_SVRI,
    WV_PARAM_CO_SV,
    WV_PARAM_CO_PVR,
    WV_PARAM_CO_PVRI,
    WV_PARAM_CO_SVI,
    WV_PARAM_CO_TVR,
    WV_PARAM_CO_TPR,
    WV_PARAM_CO_LVSW,
    WV_PARAM_CO_LVSWI,
    WV_PARAM_CO_RVSW,
    WV_PARAM_CO_RVSWI,
    WV_PARAM_CO_LHCPP,
    WV_PARAM_CO_RPI,
    WV_PARAM_MIB_SVO2_TB,
    WV_PARAM_MIB_SVO2_SVO2,
    WV_PARAM_MIB_SVO2_SAO2,
    WV_PARAM_MIB_SVO2_CCO,
    WV_PARAM_MIB_SVO2_CCI,
    WV_PARAM_MIB_SVO2_ICO,
    WV_PARAM_MIB_SVO2_ICI,
    WV_PARAM_MIB_SVO2_SVR,
    WV_PARAM_MIB_SVO2_SVRI,
    WV_PARAM_MIB_SVO2_DO2,
    WV_PARAM_MIB_SVO2_VO2,
    WV_PARAM_MIB_SVO2_SV,
    WV_PARAM_MIB_SVO2_SQI,
    WV_PARAM_MIB_SVO2_REF,
    WV_PARAM_MIB_VENT_RR,
    WV_PARAM_MIB_VENT_PAP,
    WV_PARAM_MIB_VENT_PEEP,
    WV_PARAM_MIB_VENT_MAP,
    WV_PARAM_MIB_VENT_MV,
    WV_PARAM_MIB_VENT_TV,
    WV_PARAM_MIB_VENT_PAUSE,
    WV_PARAM_MIB_VENT_IE_RATIO,
    WV_PARAM_MIB_VENT_IO2,
    WV_PARAM_MIB_VENT_MVI,
    WV_PARAM_MIB_VENT_TVI,
    WV_PARAM_MGM_CO2_RR,
    WV_PARAM_MGM_CO2_ETCO2,
    WV_PARAM_MGM_CO2_ICO2,
    WV_PARAM_MGM_O2_ETO2,
    WV_PARAM_MGM_O2_IO2,
    WV_PARAM_MGM_N2O_ETN2O,
    WV_PARAM_MGM_N2O_IN2O,
    WV_PARAM_MGM_AGENT_ETHAL,
    WV_PARAM_MGM_AGENT_IHAL,
    WV_PARAM_MGM_AGENT_ETISO,
    WV_PARAM_MGM_AGENT_IISO,
    WV_PARAM_MGM_AGENT_ETENF,
    WV_PARAM_MGM_AGENT_IENF,
    WV_PARAM_MGM_AGENT_ETSEV,
    WV_PARAM_MGM_AGENT_ISEV,
    WV_PARAM_MGM_AGENT_ETDES,
    WV_PARAM_MGM_AGENT_IDES,
    WV_PARAM_O2_PRESSURE_WALL,
    WV_PARAM_O2_PRESSURE_TANK,
    WV_PARAM_N2O_PRESSURE_WALL,
    WV_PARAM_N2O_PRESSURE_TANK,
    WV_PARAM_AIR_PRESSURE_WALL,
    WV_PARAM_AIR_PRESSURE_TANK,
    WV_PARAM_MIB_PAO2_PAO2,
    WV_PARAM_MIB_PAO2_PVO2,
    WV_PARAM_MIB_PAO2_PACO2,
    WV_PARAM_MIB_PAO2_VCO2,
    WV_PARAM_VENT_CALCS_DO2,
    WV_PARAM_VENT_CALCS_VO2,
    WV_PARAM_VENT_CALCS_MV,
    WV_PARAM_VENT_CALCS_IE_RATIO,
    WV_PARAM_VENT_CALCS_CAO2,
    WV_PARAM_VENT_CALCS_CVO2,
    WV_PARAM_VENT_CALCS_AVDO2,
    WV_PARAM_VENT_CALCS_DO2I,
    WV_PARAM_VENT_CALCS_VO2I,
    WV_PARAM_VENT_CALCS_O2ER,
    WV_PARAM_VENT_CALCS_AADO2,
    WV_PARAM_VENT_CALCS_QSQT,
    WV_PARAM_VENT_CALCS_CDYN,
    WV_PARAM_VENT_CALCS_CS,
    WV_PARAM_VENT_CALCS_RI,
    WV_PARAM_VENT_CALCS_RE,
    WV_PARAM_VENT_CALCS_EEF,
    WV_PARAM_VENT_CALCS_VD,
    WV_PARAM_VENT_CALCS_VTP_RATIO,
    WV_PARAM_VENT_CALCS_VTA_RATIO,
    WV_PARAM_VENT_CALCS_ALVENT,
    WV_PARAM_VENT_CALCS_WOB,
    WV_PARAM_TCP_O2,
    WV_PARAM_TCP_CO2,
    WV_PARAM_TCP_HTR_PWR,
    WV_PARAM_TCP2_O2,
    WV_PARAM_TCP2_CO2,
    WV_PARAM_TCP2_HTR_PWR,
    WV_PARAM_MIB_PAO2_SAO2,
    WV_PARAM_FIO2_IO2,
    WV_PARAM_EEG1_MEDIAN,
    WV_PARAM_EEG1_SEF,
    WV_PARAM_EEG1_BSR,
    WV_PARAM_EEG1_TOTAL_PWR,
    WV_PARAM_EEG1_BETA_PWR,
    WV_PARAM_EEG1_ALPHA_PWR,
    WV_PARAM_EEG1_THETA_PWR,
    WV_PARAM_EEG1_DELTA_PWR,
    WV_PARAM_EEG2_MEDIAN,
    WV_PARAM_EEG2_SEF,
    WV_PARAM_EEG2_BSR,
    WV_PARAM_EEG2_TOTAL_PWR,
    WV_PARAM_EEG2_BETA_PWR,
    WV_PARAM_EEG2_ALPHA_PWR,
    WV_PARAM_EEG2_THETA_PWR,
    WV_PARAM_EEG2_DELTA_PWR,
    WV_PARAM_EEG3_MEDIAN,
    WV_PARAM_EEG3_SEF,
    WV_PARAM_EEG3_BSR,
    WV_PARAM_EEG3_TOTAL_PWR,
    WV_PARAM_EEG3_BETA_PWR,
    WV_PARAM_EEG3_ALPHA_PWR,
    WV_PARAM_EEG3_THETA_PWR,
    WV_PARAM_EEG3_DELTA_PWR,
    WV_PARAM_EEG4_MEDIAN,
    WV_PARAM_EEG4_SEF,
    WV_PARAM_EEG4_BSR,
    WV_PARAM_EEG4_TOTAL_PWR,
    WV_PARAM_EEG4_BETA_PWR,
    WV_PARAM_EEG4_ALPHA_PWR,
    WV_PARAM_EEG4_THETA_PWR,
    WV_PARAM_EEG4_DELTA_PWR,
    WV_PARAM_AIRWAY_CO2_VENT_PIP,
    WV_PARAM_AIRWAY_CO2_VENT_PEEP,
    WV_PARAM_AIRWAY_CO2_VENT_MAP,
    WV_PARAM_AIRWAY_CO2_VENT_TV,
    WV_PARAM_AIRWAY_CO2_VENT_TVI_MECH,
    WV_PARAM_AIRWAY_CO2_VENT_TVI_SPON,
    WV_PARAM_AIRWAY_CO2_VENT_TVA,
    WV_PARAM_AIRWAY_CO2_VENT_MV,
    WV_PARAM_AIRWAY_CO2_VENT_TOTAL_MV,
    WV_PARAM_AIRWAY_CO2_VENT_MVA,
    WV_PARAM_AIRWAY_CO2_VENT_MV_SPON,
    WV_PARAM_AIRWAY_CO2_VENT_VD_AW,
    WV_PARAM_AIRWAY_CO2_VENT_C_DYN,
    WV_PARAM_AIRWAY_CO2_VENT_C_STAT,
    WV_PARAM_AIRWAY_CO2_VENT_C20_DYN,
    WV_PARAM_AIRWAY_CO2_VENT_ERAW,
    WV_PARAM_AIRWAY_CO2_VENT_IRAW,
    WV_PARAM_AIRWAY_CO2_VENT_WO_BIMP,
    WV_PARAM_AIRWAY_CO2_VENT_VCO2,
    WV_PARAM_AIRWAY_CO2_VENT_VD_VT,
    WV_PARAM_AIRWAY_CO2_VENT_VD_PHY,
    WV_PARAM_AIRWAY_CO2_VENT_RR,
    WV_PARAM_AIRWAY_CO2_VENT_VOL_DELTA,
    WV_PARAM_AIRWAY_CO2_VENT_PPLAT,
    WV_PARAM_MIB_VENT_PIP,
    WV_PARAM_MIB_BIS,
    WV_PARAM_MIB_BSR,
    WV_PARAM_MIB_SQI,
    WV_PARAM_MIB_EMG,
    WV_PARAM_LAB_DATA_PH,
    WV_PARAM_LAB_DATA_HCO3,
    WV_PARAM_LAB_DATA_HCT,
    WV_PARAM_LAB_DATA_HGB,
    WV_PARAM_ID_IPEEP,
    WV_PARAM_ID_PIF,
    WV_PARAM_ID_PEF,
    WV_PARAM_ID_TV_LEAK,
    WV_PARAM_ID_TVI_MECH,
    WV_PARAM_ID_TVI_SPON,
    WV_PARAM_ID_TVA,
    WV_PARAM_ID_MVA,
    WV_PARAM_ID_VD_AW,
    WV_PARAM_ID_C_DYN,
    WV_PARAM_ID_C20_DYN,
    WV_PARAM_ID_ERAW,
    WV_PARAM_ID_IRAW,
    WV_PARAM_ID_WO_BIMP,
    WV_PARAM_ID_TVE_MECH,
    WV_PARAM_ID_TVE_SPON,
    WV_PARAM_ID_MVE_MECH,
    WV_PARAM_ID_MVE_SPON,
    WV_PARAM_ID_RR_MECH,
    WV_PARAM_ID_RR_SPON,
    WV_PARAM_ID_RSBI,
    WV_PARAM_ID_MVCO2,
    WV_PARAM_ID_TVCO2,
    WV_PARAM_ID_TVA_SPON,
    WV_PARAM_ID_TVA_MECH,
    WV_PARAM_ID_MVA_SPON,
    WV_PARAM_ID_MVA_MECH,
    WV_PARAM_ID_PECO2,
    WV_PARAM_ID_DILUT_RATIO_AW,
    WV_PARAM_ID_INSP_TIME,
    WV_PARAM_ID_EXP_TIME,
    WV_PARAM_ID_INSP_TIME_PCT,
    WV_PARAM_ID_MV_PCT,
    WV_PARAM_ID_RAW,
    WV_PARAM_LAB_DATA_PO2,
    WV_PARAM_LAB_DATA_PCO2,
    WV_PARAM_MIB_SEF,
    WV_PARAM_MIB_POWER,
    WV_PARAM_ECG_ST_LEAD_DERIVED_V1,
    WV_PARAM_ECG_ST_LEAD_DERIVED_V2,
    WV_PARAM_ECG_ST_LEAD_DERIVED_V3,
    WV_PARAM_ECG_ST_LEAD_DERIVED_V4,
    WV_PARAM_ECG_ST_LEAD_DERIVED_V5,
    WV_PARAM_ECG_ST_LEAD_DERIVED_V6,
    WV_PARAM_SPO2_2_SATURATION,
    WV_PARAM_SPO2_2_PR,
    WV_PARAM_SPO2_DELTA,
    WV_PARAM_CALCS_SV,
    WV_PARAM_CALCS_SVR,
    WV_PARAM_CALCS_PVR,
    WV_PARAM_CALCS_LVSW,
    WV_PARAM_CALCS_RVSW,
    WV_PARAM_CALCS_ICI,
    WV_PARAM_CALCS_SVI,
    WV_PARAM_CALCS_SVRI,
    WV_PARAM_CALCS_PVRI,
    WV_PARAM_CALCS_LVSWI,
    WV_PARAM_CALCS_RVSWI,
    WV_PARAM_CALCS_TVR,
    WV_PARAM_CALCS_TPR,
    WV_PARAM_CALCS_LHCPP,
    WV_PARAM_CALCS_RPI,
    WV_PARAM_PICCO_PCO,
    WV_PARAM_PICCO_GEDV,
    WV_PARAM_PICCO_GEDVI,
    WV_PARAM_PICCO_EVLW,
    WV_PARAM_PICCO_EVLWI,
    WV_PARAM_PICCO_GEF,
    WV_PARAM_PICCO_PBT,
    WV_PARAM_PICCO_PVPI,
    WV_PARAM_PICCO_PCCO,
    WV_PARAM_PICCO_PCCI,
    WV_PARAM_PICCO_PSVI,
    WV_PARAM_PICCO_SVV,
    WV_PARAM_PICCO_PSVR,
    WV_PARAM_PICCO_PSVRI,
    WV_PARAM_PICCO_DPMAX,
    WV_PARAM_PICCO_DELTA,
    WV_PARAM_BIS_BCT,
    WV_PARAM_ICG_CCO,
    WV_PARAM_ICG_CCI,
    WV_PARAM_NMT_CURRENT,         /* NMT CURRENT    */
    WV_PARAM_NMT_TWITCH,          /* NMT TWITCH     */
    WV_PARAM_NMT_TOF_RATIO,       /* NMT TOF_RATIO  */
    WV_PARAM_NMT_TOF_COUNT,       /* NMT TOF_COUNT  */
    WV_PARAM_NMT_PTC_COUNT,       /* NMT PTC_COUNT  */
    WV_PARAM_NMT_TEMP,            /* NMT TEMP       */
    WV_CNAP_DIASTOLIC,
    WV_CNAP_SYSTOLIC,
    WV_CNAP_MEAN,
    WV_PARAM_GP3_DIASTOLIC,
    WV_PARAM_GP3_SYSTOLIC,
    WV_PARAM_GP3_MEAN,
    WV_PARAM_GP4_DIASTOLIC,
    WV_PARAM_GP4_SYSTOLIC,
    WV_PARAM_GP4_MEAN,
    WV_PARAM_GP5_DIASTOLIC,
    WV_PARAM_GP5_SYSTOLIC,
    WV_PARAM_GP5_MEAN,
    WV_PARAM_GP6_DIASTOLIC,
    WV_PARAM_GP6_SYSTOLIC,
    WV_PARAM_GP6_MEAN,
    WV_PARAM_GP7_DIASTOLIC,
    WV_PARAM_GP7_SYSTOLIC,
    WV_PARAM_GP7_MEAN,
    WV_PARAM_GP8_DIASTOLIC,
    WV_PARAM_GP8_SYSTOLIC,
    WV_PARAM_GP8_MEAN,
    WV_PARAM_PICCO_ETVI,
    WV_PARAM_PICCO_TI,
    WV_PARAM_PICCO_SV,
    WV_PARAM_PICCO_PPV,
    WV_PARAM_PICCO_PCI,
    WV_PARAM_PICCO_ITBV,
    WV_PARAM_PICCO_ITBVI,
    WV_PARAM_PICCO_CFI,
    WV_PARAM_INCUB_T1SKIN,
    WV_PARAM_INCUB_T2SKIN,
    WV_PARAM_INCUB_TAIR,
    WV_PARAM_INCUB_PERCNT_O2,
    WV_PARAM_INCUB_RH,
    WV_PARAM_INCUB_WT,
    WV_PARAM_WARMER_T1SKIN,
    WV_PARAM_WARMER_T2SKIN,
    WV_PARAM_WARMER_TMATT,
    WV_PARAM_WARMER_HTRPWR,
    WV_PARAM_MIB_SVO2_EDV,
    WV_PARAM_MIB_SVO2_EDVI,
    WV_PARAM_MIB_SVO2_SVI,
    WV_PARAM_MIB_SVO2_ESV,
    WV_PARAM_MIB_SVO2_ESVI,
    WV_PARAM_MIB_SVO2_EF,
    WV_PARAM_SETTING_VENT_MODE,
    WV_PARAM_SETTING_CMV_FREQ,
    WV_PARAM_SETTING_SIMV_FREQ,
    WV_PARAM_SETTING_PEEP,
    WV_PARAM_SETTING_INSP_TIME,
    WV_PARAM_SETTING_EXP_TIME,
    WV_PARAM_SETTING_BARO_PRESS,
    WV_PARAM_SETTING_GAS_PRESS_AIR,
    WV_PARAM_SETTING_GAS_PRESS_O2,
    WV_PARAM_SETTING_ITIME_PCT,
    WV_PARAM_SETTING_PTIME_PCT,
    WV_PARAM_SETTING_IRISTIM_PCT,
    WV_PARAM_SETTING_VOL,
    WV_PARAM_SETTING_PCONTROL,
    WV_PARAM_SETTING_PSUPPORT,
    WV_PARAM_SETTING_PT_RANGE,
    WV_PARAM_SETTING_MVE_HILIM,
    WV_PARAM_SETTING_MVE_LOLIM,
    WV_PARAM_SETTING_UPR_PRSR,
    WV_PARAM_SETTING_IO2_HILIM,
    WV_PARAM_SETTING_IO2_LOLIM,
    WV_PARAM_SETTING_IO2,
    WV_PARAM_SETTING_TRIG_SEN,
    WV_PARAM_SETTING_MAX_INSP_FLOW,
    WV_PARAM_SETTING_INSP_TV,
    WV_PARAM_SETTING_IPPV_FREQ,
    WV_PARAM_SETTING_BIPAP_LOW_PRSR,
    WV_PARAM_SETTING_BIPAP_HIGH_PRSR,
    WV_PARAM_SETTING_BIPAP_LOW_TIME,
    WV_PARAM_SETTING_BIPAP_HIGH_TIME,
    WV_PARAM_SETTING_INTERMIT_PEEP,
    WV_PARAM_SETTING_APNEA_TIME,
    WV_PARAM_SETTING_AST_SPON_BREATH,
    WV_PARAM_SETTING_TRIGGER_PRSR,
    WV_PARAM_SETTING_TACHAPNEA_FREQ,
    WV_PARAM_SETTING_TACHAPNEA_DUR,
    WV_PARAM_SETTING_FLOW_TRIG,
    WV_PARAM_SETTING_ASB_RAMP,
    WV_PARAM_SETTING_APRV_LOW_PRSR,
    WV_PARAM_SETTING_APRV_HIGH_PRSR,
    WV_PARAM_SETTING_APRV_LOW_TIME,
    WV_PARAM_SETTING_APRV_HIGH_TIME,
    WV_PARAM_SETTING_FLOW_ASSIST,
    WV_PARAM_SETTING_VOL_ASSIST,
    WV_PARAM_SETTING_O2_100PCT_SET,
    WV_PARAM_SETTING_EXP_FLOW_SET,
    WV_PARAM_SETTING_INSP_FLOW_SET,
    WV_PARAM_SETTING_HFV_MODE_AMPLITUDE,
    WV_PARAM_SETTING_HFV_MODE_FRQ,
    WV_PARAM_SETTING_MIN_VOL_HIGH_LIM,
    WV_PARAM_SETTING_MIN_VOL_LOW_LIM,
    WV_PARAM_SETTING_MIN_VOL_ALARM_DELAY,
    WV_PARAM_SETTING_NEBULIZER_SETT_ON_OFF,
    WV_PARAM_SETTING_PEAK_INSP_FLOW_SET,
    WV_PARAM_SETTING_PLATEAU_SET,
    WV_PARAM_SETTING_SIGH_ENAB_SET,
    WV_PARAM_SETTING_TRIGGER_VOL_SET,
    WV_PARAM_SETTING_FLOW_WAVE_SET,
    WV_PARAM_SETTING_FREQ_SET,
    WV_PARAM_SETTING_PEAK_INSP_AIRWAY,
    WV_PARAM_SETTING_TV_SET,
    WV_PARAM_SETTING_I_PART,
    WV_PARAM_SETTING_E_PART,
    WV_PARAM_SETTING_I_PART_SET,
    WV_PARAM_SETTING_E_PART_SET,
    WV_PARAM_SETTING_AIRWAY_PRESS_MINIMUM,
    WV_PARAM_SETTING_AIRWAY_TEMP,
    WV_PARAM_SETTING_CO2_PRODUCTION,
    WV_PARAM_SETTING_STATIC_COMPLIANCE,
    WV_PARAM_SETTING_DEAD_SPACE_PERCENT,
    WV_PARAM_SETTING_DEAD_SPACE,
    WV_PARAM_SETTING_PAUSE_TIME,
    WV_PARAM_SETTING_FLOW_PEAK_SPON,
    WV_PARAM_SETTING_GAS_TRANS_COEFF,
    WV_PARAM_SETTING_TV_LEAK,
    WV_PARAM_SETTING_MVE_SPON,
    WV_PARAM_SETTING_MVI_MECH,
    WV_PARAM_SETTING_MVE_SPON_FRAC,
    WV_PARAM_SETTING_OCCLUSION_PRESS,
    WV_PARAM_SETTING_INTRINSIC_PEEP,
    WV_PARAM_SETTING_RR_SPON,
    WV_PARAM_SETTING_TV_HIGH_FREQ,
    WV_PARAM_SETTING_TV_INSP_MANDATORY,
    WV_PARAM_SETTING_TRAPPED_VOL,
    WV_PARAM_SETTING_VITAL_CAPACITY,
    WV_PARAM_SETTING_ENDTIDAL_CO2,
    WV_PARAM_SETTING_STATIC_RESISTANCE,
    WV_PARAM_SETTING_PERCENT_MMV,
    WV_PARAM_SETTING_MMV,
    WV_PARAM_SETTING_PRESS_SLOPE,
    WV_PARAM_SETTING_P_TIME_SEC_SET,
    WV_PARAM_SETTING_INSPIRATORY_TIME,
    WV_PARAM_SETTING_EXPIRATORY_TIME,
    WV_PARAM_SETTING_O2_SUPPLY_PRESS,
    WV_PARAM_SETTING_VOLUME_LIMIT,
    WV_PARAM_SETTING_INSPIRATORY_PRESS_SET,
    WV_PARAM_SETTING_TIDAL_VOL_SPON,
    WV_PARAM_SETTING_BIAS_FLOW,
    WV_PARAM_SETTING_VSYNC_MODE,
    WV_PARAM_SETTING_FLOW_ACCEL_SET,
    WV_PARAM_SETTING_T_DECONNECT_SET,
    WV_PARAM_SETTING_BACK_UP_FREQ_SET,
    WV_PARAM_SETTING_BACK_UP_TV_SET,
    WV_PARAM_SETTING_FRESH_GAS_FLOW_SET,
    WV_PARAM_SETTING_PRESS_SUPPORT_SET,
    WV_PARAM_SETTING_RATIO_PAUSET_INSPT_SET,
    WV_PARAM_SETTING_INSP_PRESS_SET,
    WV_PARAM_SETTING_AGE_SET,
    WV_PARAM_SETTING_WEIGHT_SET,
    WV_PARAM_SETTING_PEAK_FLOW_SAVINA,
    WV_PARAM_SETTING_RESP_RATE_MANDATORY,
    WV_PARAM_SETTING_MANDATORY_MV,
    WV_PARAM_SETTING_TIDAL_VOL_MANDATORY,
    WV_PARAM_SETTING_TIDAL_VOL_SPONT,
    WV_PARAM_SETTING_LEAKAGE,
    WV_PARAM_SETTING_INSPIRED_MAC,
    WV_PARAM_SETTING_EXPIRED_MAC,
    WV_PARAM_SETTING_APNEA_DURATION,
    WV_PARAM_SETTING_DELTA_O2,
    WV_PARAM_SETTING_AIR_FLOW,
    WV_PARAM_SETTING_N2O_FLOW,
    WV_PARAM_SETTING_O2_FLOW,
    WV_PARAM_SETTING_NEGATIVE_INSP_FORCE,
    WV_PARAM_SETTING_VTASB,
    WV_PARAM_ICP2_MEAN,
    WV_PARAM_ICP2_CPP,
    WV_PARAM_ICP3_MEAN,
    WV_PARAM_ICP3_CPP,
    WV_PARAM_ICP4_MEAN,
    WV_PARAM_ICP4_CPP,
    WV_PARAM_LRSO2,
    WV_PARAM_RRSO2,
    WV_PARAM_S1RSO2,
    WV_PARAM_S2RSO2,
    WV_PARAM_BL_L,
    WV_PARAM_BL_R,
    WV_PARAM_S1R_BL,
    WV_PARAM_S2R_BL,
    WV_PARAM_DELTA_L_BASE,
    WV_PARAM_DELTA_R_BASE,
    WV_PARAM_DELTA_S1R_BASE,
    WV_PARAM_DELTA_S2R_BASE,
    WV_PARAM_MBUSX_RESP_CDYN,
    WV_PARAM_MBUSX_RESP_R,
    WV_PARAM_MBUSX_RESP_VCO2,
    WV_PARAM_MBUSX_RESP_R2,
    WV_PARAM_MBUSX_RESP_VTISPON,
    WV_PARAM_MBUSX_RESP_TISPON,
    WV_PARAM_MBUSX_RESP_PMIN,
    WV_PARAM_MBUSX_RESP_P0_1,
    WV_PARAM_MBUSX_RESP_PMEAN,
    WV_PARAM_MBUSX_RESP_PPLAT,
    WV_PARAM_MBUSX_RESP_PEEP,
    WV_PARAM_MBUSX_RESP_PEEPI,
    WV_PARAM_MBUSX_RESP_RRMAND,
    WV_PARAM_MBUSX_RESP_MVMAND,
    WV_PARAM_MBUSX_RESP_PIP,
    WV_PARAM_MBUSX_RESP_VTMAND,
    WV_PARAM_MBUSX_RESP_VTRAP,
    WV_PARAM_MBUSX_RESP_VTSPON,
    WV_PARAM_MBUSX_RESP_VTEMAND,
    WV_PARAM_MBUSX_RESP_VTESPON,
    WV_PARAM_MBUSX_RESP_VTIMAND,
    WV_PARAM_MBUSX_RESP_VT_HF,
    WV_PARAM_MBUSX_RESP_VT,
    WV_PARAM_MBUSX_RESP_VDS,
    WV_PARAM_MBUSX_RESP_VDS_VTE,
    WV_PARAM_MBUSX_RESP_NIF,
    WV_PARAM_MBUSX_RESP_PERCENT_LEAK,
    WV_PARAM_MBUSX_RESP_RRSPON,
    WV_PARAM_MBUSX_RESP_PERCENT_MVSPON,
    WV_PARAM_MBUSX_RESP_MVSPON,
    WV_PARAM_MBUSX_RESP_MV,
    WV_PARAM_MBUSX_RESP_RSB,
    WV_PARAM_MBUSX_RESP_RR,
    WV_PARAM_MBUSX_RESP_ETCO2,
    WV_PARAM_MBUSX_RESP_MEAS_IPART,
    WV_PARAM_MBUSX_RESP_MEAS_EPART,
    WV_PARAM_MBUSX_RESP_FIO2,
    WV_PARAM_MBUSX_RESP_DPHF,
    WV_PARAM_MBUSX_RESP_SPON_IPART,
    WV_PARAM_MBUSX_RESP_SPON_EPART,
    WV_PARAM_MBUSX_RESP_E,
    WV_PARAM_MBUSX_RESP_TC,
    WV_PARAM_MBUSX_RESP_CSTAT,
    WV_PARAM_MBUSX_RESP_C20_CDYN,
    WV_PARAM_MBUSX_RESP_DCO2,
    WV_PARAM_MBUSX_RESP_SC_DPSUPP,
    WV_PARAM_MBUSX_RESP_SC_DPSUPP_RATED,
    WV_PARAM_MBUSX_RESP_SC_DURATION,
    WV_PARAM_MBUSX_RESP_SC_RRSPON,
    WV_PARAM_MBUSX_RESP_SC_VT,
    WV_PARAM_MBUSX_RESP_VTE,
    WV_PARAM_MBUSX_RESP_VTI,
    WV_PARAM_MBUSX_RESP_EIP,
    WV_PARAM_MBUSX_RESP_TLOW,
    WV_PARAM_MBUSX_RESP_VTCO2,
    WV_PARAM_MBUSX_RESP_SC_ETCO2,
    WV_PARAM_MBUSX_RESP_PHIGH,
    WV_PARAM_MBUSX_RESP_PLOW,
    WV_PARAM_MBUSX_RESP_VTSPON_MEAN,
    WV_PARAM_MBUSX_RESP_VTISPON_MEAN,
    WV_PARAM_MBUSX_RESP_VTESPON_MEAN,
    WV_PARAM_MBUSX_RESP_VT_WT,
    WV_PARAM_MBUSX_RESP_MVLEAK,
    WV_PARAM_MBUSX_RESP_SET_FIO2,
    WV_PARAM_MBUSX_RESP_SET_FLOWI,
    WV_PARAM_MBUSX_RESP_SET_VTI,
    WV_PARAM_MBUSX_RESP_SET_TI,
    WV_PARAM_MBUSX_RESP_SET_IPART,
    WV_PARAM_MBUSX_RESP_SET_EPART,
    WV_PARAM_MBUSX_RESP_SET_RR,
    WV_PARAM_MBUSX_RESP_SET_PEEP,
    WV_PARAM_MBUSX_RESP_SET_DELTA_INT_PEEP_SIGH,
    WV_PARAM_MBUSX_RESP_SET_PLOW,
    WV_PARAM_MBUSX_RESP_SET_PHIGH,
    WV_PARAM_MBUSX_RESP_SET_TLOW,
    WV_PARAM_MBUSX_RESP_SET_THIGH,
    WV_PARAM_MBUSX_RESP_SET_TAPN,
    WV_PARAM_MBUSX_RESP_SET_DELTA_PSUPP,
    WV_PARAM_MBUSX_RESP_SET_PMAX,
    WV_PARAM_MBUSX_RESP_SET_FLOW_TRIGGER,
    WV_PARAM_MBUSX_RESP_SET_FHF,
    WV_PARAM_MBUSX_RESP_SET_SLOPE,
    WV_PARAM_MBUSX_RESP_SET_FLOW_ASSIST,
    WV_PARAM_MBUSX_RESP_SET_VOL_ASSIST,
    WV_PARAM_MBUSX_RESP_SET_RRAPN,
    WV_PARAM_MBUSX_RESP_SET_VTAPN,
    WV_PARAM_MBUSX_RESP_SET_PINSP,
    WV_PARAM_MBUSX_RESP_SET_PERCENT_COMP,
    WV_PARAM_MBUSX_RESP_SET_DIA_TUBE,
    WV_PARAM_MBUSX_RESP_SET_TDISCON,
    WV_PARAM_MBUSX_RESP_SET_TIMAX,
    WV_PARAM_MBUSX_RESP_SET_FLOW,
    WV_PARAM_MBUSX_RESP_SET_MAPHF,
    WV_PARAM_MBUSX_RESP_SET_IPART_HF,
    WV_PARAM_MBUSX_RESP_SET_EPART_HF,
    WV_PARAM_MBUSX_RESP_SET_AMPL_HF,
    WV_PARAM_MBUSX_RESP_SET_VT_HF,
    WV_PARAM_MBUSX_RESP_SET_RRSIGH,
    WV_PARAM_MBUSX_RESP_SET_TISIGH,
    WV_PARAM_MBUSX_RESP_SET_PSIGH,
    WV_PARAM_MBUSX_RESP_SET_INSP_TERM,
    WV_PARAM_MBUSX_RESP_SET_EXP_TERM,
    WV_PARAM_MBUSX_RESP_SET_SC_WT,
    WV_PARAM_MBUSX_RESP_SET_STARTREST,
    WV_PARAM_MBUSX_RESP_SET_ENDREST,
    WV_PARAM_MBUSX_RESP_SET_FIO2_HIGH,
    WV_PARAM_MBUSX_RESP_SET_PEEP_MAX,
    WV_PARAM_MBUSX_RESP_SET_PVAR,
    WV_PARAM_MBUSX_RESP_SET_TLOW_MAX,
    WV_PARAM_MBUSX_RESP_SET_RRSPON_LOW,
    WV_PARAM_MBUSX_RESP_SET_RRSPON_HIGH,
    WV_PARAM_MBUSX_RESP_SET_VT_LOW,
    WV_PARAM_MBUSX_RESP_SET_SC_ETCO2_HIGH,
    WV_PARAM_MBUSX_RESP_SET_SC_HT,
    WV_PARAM_MBUSX_RESP_SET_AMPLHF_MAX,
    WV_PARAM_MBUSX_RESP_SET_VTMAX,
    WV_PARAM_MBUSX_SET_INTERVAL_SIGH,
    WV_PARAM_MBUSX_VENT_MODE,
    WV_PARAM_MBUSX_SC_THERAPY,
    WV_PARAM_MBUSX_SC_DIAGNOSIS,
    WV_PARAM_MBUSX_SC_COPD,
    WV_PARAM_MBUSX_SC_ND,
    WV_PARAM_MBUSX_SC_NR,
    WV_PARAM_MBUSX_SC_CUST,
    WV_PARAM_MBUSX_PATIENT_TYPE,
    WV_PARAM_MBUSX_CO2_UNIT,
    WV_PARAM_MBUSX_VENT_OP_MODE,
    WV_PARAM_MBUSX_TUBE_TYPE,
    WV_PARAM_MBUSX_HOSE_MODE,
    WV_PARAM_MBUSX_STANDBY,
    WV_PARAM_MBUSX_APN_TRIGGER,
    WV_PARAM_MBUSX_PRODUCT_TEST,
    WV_PARAM_MBUSX_ABDML_EXT_TRGR,
    WV_PARAM_MBUSX_EXP_ATC,
    WV_PARAM_MBUSX_INSP_ATC,
    WV_PARAM_MBUSX_APN_VENT_ENBLD,
    WV_PARAM_MBUSX_APN_VENT_AUTORET_ENBLD,
    WV_PARAM_MBUSX_HME_FLTR,

    WV_PARAM_CO_OXIMETRY_SPHB_A,
    WV_PARAM_CO_OXIMETRY_SPHB_V,
    WV_PARAM_CO_OXIMETRY_SPCO,
    WV_PARAM_CO_OXIMETRY_SPOC,
    WV_PARAM_CO_OXIMETRY_SPMET,
    WV_PARAM_CO_OXIMETRY_PVI,
    WV_PARAM_PERFUSION_INDEX,

    WV_PARAM_MBUSX_SET_TE,
    WV_PARAM_MBUSX_SET_CYCLES_SIGH,
    WV_PARAM_MBUSX_SET_INTERVAL_P0_1,
    WV_PARAM_MBUSX_SET_MVHIGH_DELAY,
    WV_PARAM_MBUSX_SET_MVLOW_DELAY,
    WV_PARAM_MBUSX_SET_TPLAT,
    WV_PARAM_MBUSX_SET_FG_FLOW,
    WV_PARAM_MBUSX_SET_I_E,
    WV_PARAM_MBUSX_SET_AGE,
    WV_PARAM_MBUSX_SET_WT,
    WV_PARAM_MBUSX_SET_FLOW_ACC,
    WV_PARAM_MBUSX_SET_FG_VA,
    WV_PARAM_MBUSX_SET_ETVA,
    WV_PARAM_MBUSX_SET_FG_ISO,
    WV_PARAM_MBUSX_SET_ETISO,
    WV_PARAM_MBUSX_SET_FG_DES,
    WV_PARAM_MBUSX_SET_ETDES,
    WV_PARAM_MBUSX_SET_FG_SEV,
    WV_PARAM_MBUSX_SET_ETSEV,
    WV_PARAM_MBUSX_SET_FG_O2,
    WV_PARAM_MBUSX_SET_MINFG_FLOW,
    WV_PARAM_MBUSX_SET_IBW,
    WV_PARAM_MBUSX_SET_SLOPESIGH,
    WV_PARAM_MBUSX_SET_HT,
    WV_PARAM_MBUSX_SET_PMANINSP,
    WV_PARAM_MBUSX_SET_TMANINSP,
    WV_PARAM_MBUSX_AIR_CONS,
    WV_PARAM_MBUSX_N2O_CONS,
    WV_PARAM_MBUSX_MVE,
    WV_PARAM_MBUSX_O2_CONS,
    WV_PARAM_MBUSX_PAW,
    WV_PARAM_MBUSX_MVI,
    WV_PARAM_MBUSX_MVESPON,
    WV_PARAM_MBUSX_RPAT,
    WV_PARAM_MBUSX_MVEMAND,
    WV_PARAM_MBUSX_CO2_SLOPE,
    WV_PARAM_MBUSX_O2_CGS,
    WV_PARAM_MBUSX_FLOWDEV,
    WV_PARAM_MBUSX_HAL_CONS,
    WV_PARAM_MBUSX_ENF_CONS,
    WV_PARAM_MBUSX_ISO_CONS,
    WV_PARAM_MBUSX_DES_CONS,
    WV_PARAM_MBUSX_SEV_CONS,
    WV_PARAM_MBUSX_GAS_CONS,
    WV_PARAM_MBUSX_TCASE,
    WV_PARAM_MBUSX_INHAL,
    WV_PARAM_MBUSX_ETHAL,
    WV_PARAM_MBUSX_INENF,
    WV_PARAM_MBUSX_ETENF,
    WV_PARAM_MBUSX_INISO,
    WV_PARAM_MBUSX_ETISO,
    WV_PARAM_MBUSX_INDES,
    WV_PARAM_MBUSX_ETDES,
    WV_PARAM_MBUSX_INSEV,
    WV_PARAM_MBUSX_ETSEV,
    WV_PARAM_MBUSX_INAGENT,
    WV_PARAM_MBUSX_ETAGENT,
    WV_PARAM_MBUSX_INAGENT_SECONDARY,
    WV_PARAM_MBUSX_ETAGENT_SECONDARY,
    WV_PARAM_MBUSX_VO2,
    WV_PARAM_MBUSX_TPLAT,
    WV_PARAM_MBUSX_PAMB,
    WV_PARAM_MBUSX_FLOWIPEAK,
    WV_PARAM_MBUSX_HAL_TOT,
    WV_PARAM_MBUSX_DES_TOT,
    WV_PARAM_MBUSX_ISO_TOT,
    WV_PARAM_MBUSX_SEV_TOT,
    WV_PARAM_MBUSX_ENF_TOT,
    WV_PARAM_MBUSX_INXMAC,
    WV_PARAM_MBUSX_XMAC,
    WV_PARAM_MBUSX_LEAKAGE,
    WV_PARAM_MBUSX_RRP,
    WV_PARAM_MBUSX_APNEA_DURATION,
    WV_PARAM_MBUSX_T_AIRW,
    WV_PARAM_MBUSX_DO2,
    WV_PARAM_MBUSX_BATTERY_CAPACITY,
    WV_PARAM_MBUSX_O2BIAS,
    WV_PARAM_MBUSX_RRC,
    WV_PARAM_MBUSX_RRF,
    WV_PARAM_MBUSX_RR_2,
    WV_PARAM_MBUSX_INCO2,
    WV_PARAM_MBUSX_FG_VN20,
    WV_PARAM_MBUSX_FG_VAIR,
    WV_PARAM_MBUSX_FG_VO2,
    WV_PARAM_MBUSX_ETO2,
    WV_PARAM_MBUSX_INN20,
    WV_PARAM_MBUSX_ETN20,
    WV_PARAM_MBUSX_TI,
    WV_PARAM_MBUSX_INMAN_SPONT,
    WV_PARAM_MBUSX_COMP_SYSTEM,
    WV_PARAM_MBUSX_COMP_HOSES,
    WV_PARAM_MBUSX_TADAPT,
    WV_PARAM_MBUSX_END_EXP_CNT_AGENT,
    WV_PARAM_MBUSX_HLM_MODE,
    WV_PARAM_MBUSX_PTRACH_CALC_ENABLED,
    WV_PARAM_MBUSX_LEAKAGE_TEST,
    WV_PARAM_MBUSX_LPO,
    WV_PARAM_MBUSX_AUDIO_PAUSED,
    WV_PARAM_MBUSX_FRESH_GAS_CONTROL,
    WV_PARAM_MBUSX_SIM_MODE,
    WV_PARAM_MBUSX_THERAPY_OFF,
    WV_PARAM_MBUSX_APNEA_DETECTION_DISABLED,
    WV_PARAM_MBUSX_SCREEN_LOCKED,
    WV_PARAM_MBUSX_ANESTHESIA_STANDBY,
    WV_PARAM_MBUSX_ACTIVE_MANEUVER,
    WV_PARAM_MBUSX_AGENT_UNITS,
    WV_PARAM_MBUSX_CARRIER_GAS,
    WV_PARAM_MBUSX_CUVETTE_TYPE,
    WV_PARAM_MBUSX_DEVICE_CHECK,
    WV_PARAM_MBUSX_GENDER,
    WV_PARAM_MBUSX_HOSE_SIZE,
    WV_PARAM_MBUSX_HOSE_TYPE,
    WV_PARAM_MBUSX_PRIMARY_AGENT,
    WV_PARAM_MBUSX_SECONDARY_AGENT,
    WV_PARAM_MBUSX_TRIGGER_LEVEL,
    WV_PARAM_BIS_L,
    WV_PARAM_BIS_R,
    WV_PARAM_BIS_EMG_L,
    WV_PARAM_BIS_EMG_R,
    WV_PARAM_BIS_SQI_L,
    WV_PARAM_BIS_SQI_R,
    WV_PARAM_BIS_BSR_L,
    WV_PARAM_BIS_BSR_R,
    WV_PARAM_BIS_PWR_L,
    WV_PARAM_BIS_PWR_R,
    WV_PARAM_BIS_SEF_L,
    WV_PARAM_BIS_SEF_R,
    WV_PARAM_BIS_BCT_L,
    WV_PARAM_BIS_BCT_R,
    WV_PARAM_BIS_SBIS_L,
    WV_PARAM_BIS_SBIS_R,
    WV_PARAM_BIS_SEMG_L,
    WV_PARAM_BIS_SEMG_R,
    WV_PARAM_BIS_Med_L,
    WV_PARAM_BIS_Med_R,
    WV_PARAM_BIS_SET_SMOOTHING_RATE,
    WV_PARAM_NMT_TOF_SREMAIN,
    WV_PARAM_NMT_SET_TOF_STIME,
    WV_PARAM_NMT_SET_SENSITIVITY,
    WV_PARAM_MIB_SVO2_SVV,
    WV_PARAM_MBUSX_TCE,
    WV_PARAM_NMT_SET_PULSE_WIDTH,         /* NMT SET_PULSE_WIDTH    */
    WV_PARAM_MBUSX_RHOSE,
    WV_PARAM_MBUSX_DVT,
    WV_PARAM_MBUSX_RRTRIG,
    WV_PARAM_MGM_XMAC,
    WV_PARAM_MGM_UNKNOWN_AGENT,
    WV_PARAM_FEM_DIASTOLIC,
    WV_PARAM_FEM_SYSTOLIC,
    WV_PARAM_FEM_MEAN,
    WV_PARAM_RAD_DIASTOLIC,
    WV_PARAM_RAD_SYSTOLIC,
    WV_PARAM_RAD_MEAN,
    WV_PARAM_UAP_DIASTOLIC,
    WV_PARAM_UAP_SYSTOLIC,
    WV_PARAM_UAP_MEAN,
    WV_PARAM_UVP_MEAN,
    WV_PARAM_BRA_DIASTOLIC,
    WV_PARAM_BRA_SYSTOLIC,
    WV_PARAM_BRA_MEAN,
    WV_PARAM_AXL_DIASTOLIC,
    WV_PARAM_AXL_SYSTOLIC,
    WV_PARAM_AXL_MEAN,
    WV_PARAM_FEMV_MEAN,
    WV_PARAM_AOR_DIASTOLIC,
    WV_PARAM_AOR_SYSTOLIC,
    WV_PARAM_AOR_MEAN,
    WV_PARAM_BDP_MEAN,
    WV_PARAM_BDP_BPP,
    WV_PARAM_ABD_MEAN,
    WV_PARAM_ABD_APP,
    WV_PARAM_GPM_MEAN,
    WV_PARAM_ESO_MEAN,
    WV_PARAM_TEMP_BASIC_ORAL,
    WV_PARAM_TEMP_BASIC_ESO,
    WV_PARAM_TEMP_BASIC_NASAL,
    WV_PARAM_TEMP_BASIC_RECTAL,
    WV_PARAM_TEMP_BASIC_BLAD,
    WV_PARAM_TEMP_BASIC_CORE,
    WV_PARAM_TEMP_BASIC_BLOOD,
    WV_PARAM_TEMP_BASIC_BLANKET,
    WV_PARAM_TEMP_BASIC_SKIN,
    WV_PARAM_TEMP_BASIC_SKIN_RIGHT,
    WV_PARAM_TEMP_BASIC_SKIN_LEFT,
    WV_PARAM_TEMP1_ORAL,
    WV_PARAM_TEMP1_ESO,
    WV_PARAM_TEMP1_NASAL,
    WV_PARAM_TEMP1_RECTAL,
    WV_PARAM_TEMP1_BLAD,
    WV_PARAM_TEMP1_CORE,
    WV_PARAM_TEMP1_BLOOD,
    WV_PARAM_TEMP1_BLANKET,
    WV_PARAM_TEMP1_SKIN,
    WV_PARAM_TEMP1_SKIN_RIGHT,
    WV_PARAM_TEMP1_SKIN_LEFT,
    WV_PARAM_PRESS_VAR_SPV,
    WV_PARAM_PRESS_VAR_PPV,
    WV_PARAM_AUDIO_PAUSED,
    WV_PARAM_LAB_DATA_PVO2,
    WV_PARAM_LAB_DATA_SAO2,
    WV_PARAM_LAB_DATA_SVO2,
    WV_PARAM_LAST = WV_PARAM_LAB_DATA_SVO2
} WV_PARAMETER_ID;

//
//   Waveform ID's
//
typedef enum {
    WV_WAVE_INVALID,
    WV_WAVE_FIRST,
    WV_WAVE_ECG_LEAD_I = WV_WAVE_FIRST,
    WV_WAVE_ECG_LEAD_II,
    WV_WAVE_ECG_LEAD_III,
    WV_WAVE_ECG_LEAD_AVR,
    WV_WAVE_ECG_LEAD_AVF,
    WV_WAVE_ECG_LEAD_AVL,
    WV_WAVE_ECG_LEAD_V1,
    WV_WAVE_ECG_LEAD_V_PRIME,
    WV_WAVE_ECG_LEAD_V,
    WV_WAVE_ECG_LEAD_V2,
    WV_WAVE_ECG_LEAD_V3,
    WV_WAVE_ECG_LEAD_V4,
    WV_WAVE_ECG_LEAD_V5,
    WV_WAVE_ECG_LEAD_V6,
    WV_WAVE_RESP,
    WV_WAVE_ART,
    WV_WAVE_PA,
    WV_WAVE_ICP,
    WV_WAVE_CVP,
    WV_WAVE_LA,
    WV_WAVE_RA,
    WV_WAVE_LV,
    WV_WAVE_RV,
    WV_WAVE_GP1,
    WV_WAVE_GP2,
    WV_WAVE_P1A,
    WV_WAVE_P1B,
    WV_WAVE_P1C,
    WV_WAVE_P1D,
    WV_WAVE_P2A,
    WV_WAVE_P2B,
    WV_WAVE_P2C,
    WV_WAVE_P2D,
    WV_WAVE_P3A,
    WV_WAVE_P3B,
    WV_WAVE_P3C,
    WV_WAVE_P3D,
    WV_WAVE_SPO2,
    WV_WAVE_TEMP_BASIC_A,
    WV_WAVE_TEMP_BASIC_B,
    WV_WAVE_TEMP1_A,
    WV_WAVE_TEMP1_B,
    WV_WAVE_TEMP2_A,
    WV_WAVE_TEMP2_B,
    WV_WAVE_TEMP3_A,
    WV_WAVE_TEMP3_B,
    WV_WAVE_AIRWAY_CO2,
    WV_WAVE_AIRWAY_CO2_PRESSURE,
    WV_WAVE_AIRWAY_CO2_FLOW,
    WV_WAVE_CO_BLOOD,
    WV_WAVE_MIB_VENT_PRESSURE,
    WV_WAVE_MIB_VENT_FLOW,
    WV_WAVE_MGM_CO2,
    WV_WAVE_MGM_O2,
    WV_WAVE_MGM_N2O,
    WV_WAVE_MGM_AGENT_HAL,
    WV_WAVE_MGM_AGENT_ISO,
    WV_WAVE_MGM_AGENT_ENF,
    WV_WAVE_MGM_AGENT_SEV,
    WV_WAVE_MGM_AGENT_DES,
    WV_WAVE_P1,
    WV_WAVE_P2,
    WV_WAVE_EEG1,
    WV_WAVE_EEG2,
    WV_WAVE_EEG3,
    WV_WAVE_EEG4,
    WV_WAVE_MIB_VENT_VOL,
    WV_WAVE_ECG_LEAD_DERIVED_V1,
    WV_WAVE_ECG_LEAD_DERIVED_V2,
    WV_WAVE_ECG_LEAD_DERIVED_V3,
    WV_WAVE_ECG_LEAD_DERIVED_V4,
    WV_WAVE_ECG_LEAD_DERIVED_V5,
    WV_WAVE_ECG_LEAD_DERIVED_V6,
    WV_WAVE_ECG_LEAD_AVR_INV,
    WV_WAVE_GP3,
    WV_WAVE_GP4,
    WV_WAVE_GP5,
    WV_WAVE_GP6,
    WV_WAVE_GP7,
    WV_WAVE_GP8,
    WV_WAVE_CNAP,
    WV_WAVE_ICP2,
    WV_WAVE_ICP3,
    WV_WAVE_ICP4,
    WV_WAVE_MBUSX_PAW,
    WV_WAVE_MBUSX_FLOW,
    WV_WAVE_MBUSX_VOL,
    WV_WAVE_MBUSX_CO2,
    WV_WAVE_EEG_T,
    WV_WAVE_EEG_E,
    WV_WAVE_EEG_LT,
    WV_WAVE_EEG_RT,
    WV_WAVE_EEG_LE,
    WV_WAVE_EEG_RE,
    WV_WAVE_FEM,
    WV_WAVE_RAD,
    WV_WAVE_UAP,
    WV_WAVE_UVP,
    WV_WAVE_BRA,
    WV_WAVE_AXL,
    WV_WAVE_FEMV,
    WV_WAVE_AOR,
    WV_WAVE_BDP,
    WV_WAVE_ABD,
    WV_WAVE_GPM,
    WV_WAVE_ESO,
    WV_WAVE_LAST = WV_WAVE_ESO
} WV_WAVEFORM_ID;


typedef enum WV_OPERATING_MODE
{
    WV_OPERATING_MODE_INVALID = 0,
    WV_OPERATING_MODE_MONITORING,
    WV_OPERATING_MODE_STANDBY,
    WV_OPERATING_MODE_READY,
    WV_OPERATING_MODE_BUSY,
    WV_OPERATING_MODE_PAPEROUT,
    WV_OPERATING_MODE_DOOR_OPEN,
    WV_OPERATING_MODE_COMM_FAILURE,
    WV_OPERATING_MODE_DEVICE_FAILURE,
    WV_OPERATING_MODE_NA,
    WV_OPERATING_MODE_DISCHARGE = WV_OPERATING_MODE_NA,
    WV_OPERATING_MODE_LAST = WV_OPERATING_MODE_NA
} WV_OPERATING_MODE;

typedef enum WV_DEVICE_CATEGORY
{
    WV_DEVICE_CATEGORY_INVALID = 0,
    WV_DEVICE_CATEGORY_INFINITY,
    WV_DEVICE_CATEGORY_SDC,
    WV_DEVICE_CATEGORY_SDC_INFINITY,
    WV_DEVICE_CATEGORY_LAST = WV_DEVICE_CATEGORY_SDC_INFINITY
} WV_DEVICE_CATEGORY;


typedef enum WV_PARAM_ALARM_ATTR
{
    WV_PARAM_ALARM_ATTR_INVALID = 0,
    WV_PARAM_ALARM_ATTR_ENABLED,
    WV_PARAM_ALARM_ATTR_DISABLED,
    WV_PARAM_ALARM_ATTR_NONE        // does not alarm; no alarm limits
} WV_PARAM_ALARM_ATTR;


typedef enum WV_ALARM_GRADE
{
    WV_ALARM_GRADE_INVALID = 0,
    WV_ALARM_GRADE_NONE,
    WV_ALARM_GRADE_ADV,
    WV_ALARM_GRADE_SER,
    WV_ALARM_GRADE_LT,
} WV_ALARM_GRADE;


typedef enum WV_ALARM_STATE
{
    WV_ALARM_STATE_INVALID = 0,
    WV_ALARM_STATE_ACTIVE,
    WV_ALARM_STATE_NOT_ACTIVE,
    WV_ALARM_STATE_SILENCED,
    WV_ALARM_STATE_REACTIVE,
    WV_ALARM_STATE_LATCHED,
} WV_ALARM_STATE;

typedef enum WV_ALARM_LIMIT_VIOLATION_TYPE
{
    WV_ALARM_LIMIT_INVALID,
    WV_ALARM_LIMIT_NONE,
    WV_ALARM_LIMIT_LOW,
    WV_ALARM_LIMIT_HIGH
}WV_ALARM_LIMIT_VIOLATION_TYPE;

typedef enum WV_NET_UNITS_OF_MEASURE
{
    WV_UOM_INVALID = 0,
    WV_UOM_METER,
    WV_UOM_MM,
    WV_UOM_INCH,
    WV_UOM_FOOT,
    WV_UOM_SECOND,
    WV_UOM_MINUTE,
    WV_UOM_HOUR,
    WV_UOM_DAY,
    WV_UOM_MMHG,
    WV_UOM_KPA,                         /*10*/
    WV_UOM_CM_H2O,
    WV_UOM_GRAM,
    WV_UOM_KG,
    WV_UOM_LB,
    WV_UOM_LITER,
    WV_UOM_ML,
    WV_UOM_CENTIGRADE,
    WV_UOM_FAHRENHEIT,
    WV_UOM_KELVIN,
    WV_UOM_VOLT,                            /*20*/
    WV_UOM_MILLIVOLT,
    WV_UOM_MICROVOLT,
    WV_UOM_OHM,
    WV_UOM_LITERS_PER_MIN,
    WV_UOM_ML_PER_SEC,
    WV_UOM_BEATS_PER_MIN,
    WV_UOM_BREATHS_PER_MIN,
    WV_UOM_PERCENT,
    WV_UOM_COUNTS,
    WV_UOM_UNITLESS,                        /*30*/
    WV_UOM_CUBIC_CM,
    WV_UOM_MILLIVOLTS_PER_CM,
    WV_UOM_MM_PER_SEC,
    WV_UOM_CENTIMETER,
    WV_UOM_HERTZ,
    WV_UOM_LITER_PER_MIN_PER_METER_SQUARED,
    WV_UOM_DYNE_SEC_PER_CM_TO_FIFTH,
    WV_UOM_DYNE_SEC_METER_SQUARED_PER_CM_TO_FIFTH,
    WV_UOM_ML_PER_MIN,
    WV_UOM_ML_PER_BEAT,                 /*40*/
    WV_UOM_ML_PER_CM_H2O,
    WV_UOM_CM_H2O_PER_LITER,
    WV_UOM_CC_PER_MIN,
    WV_UOM_DELTA_DEGREES_C,
    WV_UOM_DELTA_DEGREES_F,
    WV_UOM_BAROMETRIC_PRESSURE,
    WV_UOM_DECIBEL,
    WV_UOM_BAR,
    WV_UOM_PSI,
    WV_UOM_OUNCE,                               /*50*/
    WV_UOM_ML_PER_METER_SQUARED,
    WV_UOM_GRAM_METER,
    WV_UOM_GRAM_METER_PER_METER_SQUARED,
    WV_UOM_MMHG_PER_MINUTE,
    WV_UOM_ML_PER_BREATH,
    WV_UOM_ML_PER_DECILITER,
    WV_UOM_ML_PER_MIN_PER_METER_SQUARED,
    WV_UOM_JOULES_PER_LITER_PER_SECOND,
    WV_UOM_CMH20_PER_LITER_PER_SECOND,
    WV_UOM_GRAMS_PER_LITER,                 /* 60 */
    WV_UOM_GRAMS_PER_DECI_LITER,
    WV_UOM_GRAMS_PER_100_ML,
    WV_UOM_MMOL_PER_LITER,
    WV_UOM_MEQ_PER_ML,
    WV_UOM_MEQ_PER_LITER,
    WV_UOM_MBAR,
    WV_UOM_MBAR_TIMES_S_L_10,
    WV_UOM_MBAR_L_S,
    WV_UOM_ON_OFF,
    WV_UOM_ML_SQUARED_PER_SEC,              /* 70 */
    WV_UOM_BPM_PER_LITER,
    WV_UOM_LITERS_PER_BAR,
    WV_UOM_MBAR_PER_LITER_10,
    WV_UOM_MILLILITER_PER_KILOGRAM,
    WV_UOM_MMHG_PER_SEC,
    WV_UOM_DYNE_SEC_CM_TO_MINUS_5,
    WV_UOM_DYNE_SEC_CM_TO_MINUS_5_PER_METER_SQUARED,
    WV_UOM_PERCENT_PER_HALF_HR,
    WV_UOM_PSIG,
    WV_UOM_ML_PER_M2,                       /* 80 */
    WV_UOM_ML_PER_BEAT_PER_M2,
    WV_UOM_LITER_PER_SEC,
    WV_UOM_TORR,
    WV_UOM_EVENTS_PER_HOUR,
    WV_UOM_MBAR_PER_SEC,
    WV_UOM_DYNE_SEC_CM_TO_MINUS_5_METER_SQUARED,
    WV_UOM_MBAR_PER_LITER,
    WV_UOM_ML_PER_MBARS,
    WV_UOM_ML_SQUARED_TIMES_10_PER_SEC,
    WV_UOM_PERCENT_PIF,
    WV_UOM_PERCENT_PEF,
    WV_UOM_EVENTS_PER_MIN_PER_LITER,
    WV_UOM_JOULE_PER_LITER,
    WV_UOM_CM_H20_PER_MICROVOLT,
    WV_UOM_TEN_ML_PER_MIN,
    WV_UOM_YEARS,
    WV_UOM_KILOOHMS,
    WV_UOM_100_OHM,
    WV_UOM_1_20_MICROVOLT,
    WV_UOM_MMHG_PER_LITER,
    WV_UOM_KPA_PER_LITER,
    WV_UOM_VOL_PERCENT_PER_LITER,
    WV_UOM_CYCLES_PER_SIGH,
    WV_UOM_MICROSECONDS,
    WV_UOM_MICROAMPERES,
    WV_UOM_MILLIAMPERES,
    WV_UOM_EVENT_PER_MIN_PER_ML,
    WV_UOM_ML_PER_HECTO_PASCAL,
    WV_UOM_EVENT_PER_MIN,
    WV_UOM_AGE,
    WV_UOM_LAST = WV_UOM_AGE
} WV_NET_UNITS_OF_MEASURE;

typedef enum WV_NET_PATIENT_CATEGORY
{
    WV_PATIENT_CATEGORY_INVALID,
    WV_PATIENT_CATEGORY_ADULT,
    WV_PATIENT_CATEGORY_NEONATE,
    WV_PATIENT_CATEGORY_PEDIATRIC,
    WV_PATIENT_CATEGORY_LAST = WV_PATIENT_CATEGORY_PEDIATRIC
} WV_NET_PATIENT_CATEGORY;

typedef enum WV_NET_PATIENT_RACE
{
    WV_NET_PATIENT_RACE_INVALID,
    WV_NET_PATIENT_RACE_UNKNOWN,
    WV_NET_PATIENT_RACE_CAUCASIAN,
    WV_NET_PATIENT_RACE_ORIENTAL,
    WV_NET_PATIENT_RACE_AFRO,
    WV_NET_PATIENT_RACE_OTHER
} WV_NET_PATIENT_RACE;

typedef enum WV_NET_SEX
{
    WV_NET_SEX_INVALID,
    WV_NET_SEX_UNKNOWN,
    WV_NET_SEX_MALE,
    WV_NET_SEX_FEMALE
} WV_NET_SEX;

typedef enum WV_COLOR
{
    WV_COLOR_INVALID = 0,
    WV_COLOR_BLACK,
    WV_COLOR_WHITE,
    WV_COLOR_RED,
    WV_COLOR_BRIGHT_RED,
    WV_COLOR_YELLOW,
    WV_COLOR_BRIGHT_YELLOW,
    WV_COLOR_DARK_GREY,
    WV_COLOR_GREY,
    WV_COLOR_BRIGHT_GREY,
    WV_COLOR_GREEN,
    WV_COLOR_BLUE,
    WV_COLOR_ORANGE,
    WV_COLOR_SUNLIGHT_GREEN,
    WV_COLOR_SUNLIGHT_BLUE,
    WV_COLOR_REGULAR_GREEN,
    WV_COLOR_SHADE_GREEN,
    WV_COLOR_PURPLE,
    WV_COLOR_LIGHT_BLUE,
    WV_COLOR_GREY_BLUE,
    WV_COLOR_BLUE_PURPLE,
    WV_COLOR_CYAN,
    WV_COLOR_SEVOFLURANE_YELLOW,
    WV_COLOR_ENFLURANE_ORANGE,
    WV_COLOR_HALOTHANE_RED,
    WV_COLOR_ISOFLURANE_PURPLE,
    WV_COLOR_DESFLURANE_BLUE,
    WV_COLOR_N2O_ISO_BLUE,
    WV_COLOR_N2O_BLUE,
    WV_COLOR_N2O_NEUTRAL_GREY,
    WV_COLOR_O2_ISO_WHITE,
    WV_COLOR_O2_GREEN,
    WV_COLOR_O2_NEUTRAL_GREY,
    WV_COLOR_AIR_ISO_GREY,
    WV_COLOR_AIR_YELLOW,
    WV_COLOR_AIR_NEUTRAL_GREY,
    WV_COLOR_CO2_GREY,
    WV_COLOR_LAST = WV_COLOR_CO2_GREY
} WV_COLOR;

typedef enum WV_DEVICE_PREFERENCE
{
    WV_INFINITY_ONLY,
    WV_SDC_PREFERRED,
    WV_SDC_ONLY


} WV_DEVICE_PREFERENCE;

typedef enum WV_ALERT_KIND
{
    WV_KIND_INVALID,
    WV_KIND_PHYSIOLOGICAL,
    WV_KIND_TECHNICAL,
    WV_KIND_OTHER
} WV_ALERT_KIND;

typedef enum WV_SIGNAL_MANIFESTATION
{
    WV_MANIFESTATION_INVALID,
    WV_MANIFESTATION_AUDIBLE,
    WV_MANIFESTATION_VISIBLE
} WV_SIGNAL_MANIFESTATION;

typedef enum WV_SIGNAL_PRESENCE
{
    WV_PRESENCE_INVALID,
    WV_PRESENCE_ON,
    WV_PRESENCE_OFF,
    WV_PRESENCE_LATCHED,
    WV_PRESENCE_ACKNOWLEDGED
} WV_SIGNAL_PRESENCE;

typedef enum WV_ACTIVATION_STATE
{
    WV_ACTIVATION_INVALID,
    WV_ACTIVATION_ON,
    WV_ACTIVATION_OFF,
    WV_ACTIVATION_PAUSED
} WV_ACTIVATION_STATE;

//
//   Structs
//

typedef int WV_CONNECT_ID;
typedef short SINT16;
typedef unsigned short UINT16;
typedef unsigned char UINT8;



typedef struct
{
    int WvMonitoringUnits[WV_MAX_MONITORING_UNITS];
} WV_MONITORING_UNIT_LIST;

typedef struct
{
    wchar_t             PatientName[WV_PATIENT_NAME_SIZE];
    wchar_t             PatientID[WV_PATIENT_ID_SIZE];
    wchar_t             BedLabel[WV_BED_LABEL_SIZE];
    wchar_t             CareUnit[WV_CARE_UNIT_SIZE];
    wchar_t             FileName[WV_FILE_NAME_SIZE];
    wchar_t             IPAddress[WV_IP_ADDRESS_SIZE];
    wchar_t             MulticastIP[WV_MULTICAST_IP_SIZE];
    wchar_t             DeviceType[WV_DEVICE_TYPE_SIZE];
    wchar_t          SerialNumber[WV_SERIAL_NUM_SIZE];
    WV_OPERATING_MODE DeviceStatus;
    WV_CONNECT_ID     ConnectID;  // 0 if not connected
    BOOL                 Wireless;
    wchar_t             HostName[WV_HOSTNAME_SIZE];
    wchar_t          HospName[WV_HOSPNAME_SIZE];
    WV_DEVICE_CATEGORY deviceCategory;
    uint32_t         dirEntryId;
} WV_BED_DESCRIPTION_W;


typedef struct
{
    WV_BED_DESCRIPTION_W WvBeds[WV_MAX_BEDS_PER_SERVER];
} WV_BED_LIST_W;


typedef struct
{
    WV_ALARM_STATE           AlarmState;
    WV_ALARM_GRADE           AlarmGrade;
    wchar_t                    AlarmMessage[WV_ALARM_MESSAGE_SIZE];
    int32_t                 AlarmTimeStamp;
    int64_t                 AlarmTickTimeStamp;
    WV_PARAMETER_ID          WvParameterID; // WV_PARAM_INVALID returned for parameters not
                                             // yet supported by Gateway.
                                             // NEVER valid for Vent alarms
} WV_ALARM_INFO_W;


//------------------------------------------
// All Alarms
//------------------------------------------
typedef struct
{
    WV_SIGNAL_MANIFESTATION SignalManifestation;
    WV_ACTIVATION_STATE     SignalActivationState;
    WV_SIGNAL_PRESENCE      SignalPresence;

} WV_ALARM_SIGNAL;


typedef struct
{
                        
    int32_t                         AlarmTimeStamp;                         // Julian representation of the time of the alarm onset
    int64_t                         AlarmTickTimeStamp;                     // relative time representation of the time of the alarm onset
    wchar_t                         AlarmHandle[WV_ALARM_MESSAGE_SIZE];     // handle to uniquely identify the alarm (UTF16)
    wchar_t                         AlarmRefId[WV_ALARM_MESSAGE_SIZE];      // 11073 reference id, a string representation of the alarm code, 
                                                                            // e.g. MDC_EVT_LEAD_OFF
    int                             AlarmCode;                              // 11073 nomenclature code for the alarm
    WV_ALERT_KIND                   AlarmKind;                              // kind of alarm: WV_KIND_PHYSIOLOGICAL, WV_KIND_TECHNICAL, WV_KIND_OTHER
    WV_ALARM_GRADE                  AlarmGrade;                             // grade of the alarm: WV_ALARM_GRADE_NONE, WV_ALARM_GRADE_ADV,                
                                                                            // WV_ALARM_GRADE_SER, or WV_ALARM_GRADE_LT,
    int                             AlarmRank;                              // ranking within the alarm grade where higher number is higher priority
    WV_PARAMETER_ID                 WvParameterID;                          // identifies the parameter, if any, associated with the alarm
    WV_NET_UNITS_OF_MEASURE         WvUnitOfMeasure;                        // identifies the unit of measure of the associated parameter
    wchar_t                         AlarmSourceRefID[WV_ALARM_MESSAGE_SIZE];// 11073 reference id, a string representation of the parameter code, 
                                                                            // e.g. MDC_ECG_CARD_BEAT_RATE
    int                             AlarmSourceCode;                        // 11073 nomenclature code for the associated parameter
    int                             AlarmSourceMDSInstance;                 // the instance of the MDS that contains the associated parameter
    int                             AlarmSourceVMDInstance;                 // the instance of the VMD that contains the associated parameter
    int                             AlarmSourceChannelInstance;             // the instance of the channel that contains the associated parameter
    int                             AlarmSourceMetricInstance;              // the instance of the associated parameter
    BOOL                            AlarmConditionPresence;                 // indicates if the alarm condition is present
    WV_ACTIVATION_STATE             AlarmActivationState;                   // indicates whether the alarm condition detection is active 
    WV_ALARM_LIMIT_VIOLATION_TYPE   AlarmLimitViolationType;                // alarm limit violation type : WV_ALARM_LIMIT_NONE, WV_ALARM_LIMIT_LOW,
                                                                            // WV_ALARM_LIMIT_HIGH
    wchar_t                         AlarmMessage[WV_ALARM_MESSAGE_SIZE];    // alarm message
    WV_ALARM_SIGNAL                 AlarmSignals[WV_MAX_ALARM_SIGNALS];     // structure specifying the alarm signals
    BOOL                            AlarmSourceValueIsNumeric;              // if TRUE, the value is numeric, otherwise it is a code that represents a string
    wchar_t                         AlarmSourceValue[WV_ALARM_MESSAGE_SIZE];// the value of the associated parameter, if any
} WV_SDC_ALARM_INFO_W;


typedef struct
{
    WV_SDC_ALARM_INFO_W WvAllAlarms[WV_MAX_ALARMS_PER_BED];
} WV_ALL_ALARMS_LIST_W;

typedef struct
{
    WV_PARAMETER_ID WvParameters[WV_MAX_PARAMETERS_PER_BED];
} WV_PARAMETER_LIST;

typedef struct
{
    WV_PARAMETER_ID          WvParameterID;
    wchar_t                    Label[WV_LABEL_SIZE];
    wchar_t                    Value[WV_VALUE_SIZE];
    wchar_t                    UpperLimit[WV_VALUE_SIZE];
    wchar_t                    LowerLimit[WV_VALUE_SIZE];
    wchar_t                    AlarmLimit[WV_VALUE_SIZE]; //The value in this field should only be read when an active alarm limit violation is occurring.
    WV_PARAM_ALARM_ATTR      EnableState;
    WV_ALARM_STATE           AlarmState;
    WV_ALARM_GRADE           AlarmGrade;
    int32_t                 ValueTimeStamp;
    int64_t                 ValueTickTimeStamp;
    int32_t                     AlarmTimeStamp;
    int64_t                 AlarmTickTimeStamp;
    WV_NET_UNITS_OF_MEASURE  Units;  // tried char, UINT16, UINT8,  unsigned int, int, unsigned int, SINT16, uint8_t, uint16_t,
    BOOL                        isSetting;
} WV_PARAMETER_DESCRIPTION_W;


typedef struct
{
    WV_WAVEFORM_ID WvWaveforms[WV_MAX_WAVEFORMS_PER_BED];
} WV_WAVEFORM_LIST;

typedef struct
{
    WV_WAVEFORM_ID            WvWaveformID;
    wchar_t                     Label[WV_LABEL_SIZE];
    wchar_t                     ScaleMax[WV_VALUE_SIZE];  // only relevant for waveforms that display numeric min and max scale values
    wchar_t                     ScaleMin[WV_VALUE_SIZE];  // only relevant for waveforms that display numeric min and max scale values
    wchar_t                     SampleMax[WV_VALUE_SIZE];
    wchar_t                     SampleMin[WV_VALUE_SIZE];
    wchar_t                     SampleRate[WV_VALUE_SIZE];
    WV_NET_UNITS_OF_MEASURE   Units;
} WV_WAVEFORM_DESCRIPTION_W;


//
//   The least significant 14 bits of the WV_WAVEFORM_SAMPLE hold the actual waveform sample
//
//   A WV_WAVEFORM_SAMPLE value of WV_BLANK_WAVEFORM_SAMPLE indicates that a blank should be drawn (i.e., signal was unavailable)
//
//  waveform interpretation
//  =======================
//
//  All ECG waveforms are output on a fixed scale in which each data sample represents 5uv. For these waveforms
//      the scale information provided in WvDescribeWaveform relates only to the scale displayed on the screen
//
//  Other waveforms, the scale of the data, Scale = ScaleMax / SampleMax;
//  For example,
//  
//     ART pressure         ScaleMax = 20
//                          ScaleMin = -5
//                          SampleMax = 200
//                          SampleMin = -200
//                          Units = mmHg
//
//     Scale = 20/200 = 0.1 mmHg
//
//     Therefore a waveform sample value of 1 represents    0.1 mmHg.
//                                         -2 represents   -0.2 mmHg.
//
#define WV_BLANK_WAVEFORM_SAMPLE  0x8000

typedef __int16 WV_WAVEFORM_SAMPLE;
typedef struct
{
    int     month;      /* (1 - 12) 1 = jan, 12 = dec */
    int     day;
    int     year;       /* (e.g 2001) */
} WV_DATE;


typedef struct
{
    wchar_t                 HeightLow[WV_VALUE_SIZE];
    wchar_t                 HeightHigh[WV_VALUE_SIZE];
    wchar_t                 HeightSteps[WV_VALUE_SIZE];

    wchar_t                 WeightLow[WV_VALUE_SIZE];
    wchar_t                 WeightHigh[WV_VALUE_SIZE];
    wchar_t                 WeightSteps[WV_VALUE_SIZE];
} WV_RANGES_W;

typedef struct
{
    wchar_t                 PatientName[WV_PATIENT_NAME_SIZE];
    wchar_t                 PatientID[WV_PATIENT_ID_SIZE];
    WV_DATE                 BirthDate;
    WV_NET_SEX              Sex;
    WV_NET_PATIENT_RACE     Race;
    wchar_t                 Physician[WV_PHYSICIAN_NAME_SIZE];
    WV_DATE                 AdmitDate;
    WV_NET_PATIENT_CATEGORY Category;
    wchar_t                 Height[WV_VALUE_SIZE];  /* height value */
    WV_NET_UNITS_OF_MEASURE HeightUnits;
    wchar_t                 Weight[WV_VALUE_SIZE];  /* height value */
    WV_NET_UNITS_OF_MEASURE WeightUnits;
} WV_DEMOGRAPHICS_W;


#define WV_MAX_VENT_ITEMS   155
#define WV_VENT_TYPE_SIZE   13      // including null
#define MAX_VALUE_SIZE   20

typedef struct WV_VENT_ITEM_W
{
    WV_PARAMETER_ID          WvParameterID;
    wchar_t                    Label[WV_LABEL_SIZE];
    wchar_t                    Value[WV_VALUE_SIZE];
    int32_t                   ValueTimeStamp;
    WV_NET_UNITS_OF_MEASURE  Units;
    BOOL                        isSetting;
} WV_VENT_ITEM_W;

typedef struct WV_VENT_SETTINGS_W
{
    int             numItems;
    WV_VENT_ITEM_W  items[WV_MAX_VENT_ITEMS];
    wchar_t         ventType[WV_VENT_TYPE_SIZE];
    wchar_t           PatientName[WV_PATIENT_NAME_SIZE];
    wchar_t           PatientID[WV_PATIENT_ID_SIZE];
} WV_VENT_SETTINGS_W;




/****************************************************************************************

   WvAPI Function Prototypes

   All the following routines return WV_SUCCESS if successful or one of the other
   return codes defined above if not successful.

****************************************************************************************/


/////////////////////////////////////////////////////////////////////////////////////////
//
//   WvAPI Utilities
//
//   You can use these routines to convert enum's to text 
//

#define IMPORT_FUNCTION  extern "C"

IMPORT_FUNCTION int WINAPI WvGetLabelFromParameterID_W(WV_PARAMETER_ID ParameterID, wchar_t* pLabel, int MaxLabelSize);
IMPORT_FUNCTION int WINAPI WvGetLabelFromWaveformID_W(WV_WAVEFORM_ID WaveformID, wchar_t* pLabel, int MaxLabelSize);
IMPORT_FUNCTION int WINAPI WvGetUnitStringFromEnum_W(WV_NET_UNITS_OF_MEASURE UnitEnum, wchar_t* pString, int MaxStringSize);
IMPORT_FUNCTION int WINAPI WvGetAlarmStateStringFromEnum_W(WV_ALARM_STATE StateEnum, wchar_t* pString, int MaxStringSize);
IMPORT_FUNCTION int WINAPI WvGetAlarmGradeStringFromEnum_W(WV_ALARM_GRADE GradeEnum, wchar_t* pString, int MaxStringSize);
IMPORT_FUNCTION int WINAPI WvGetEnableStateStringFromEnum_W(WV_PARAM_ALARM_ATTR EnableEnum, wchar_t* pString, int MaxStringSize);
IMPORT_FUNCTION int WINAPI WvGetOperatingModeStringFromEnum_W(WV_OPERATING_MODE OperatingEnum, wchar_t* pString, int MaxStringSize);
IMPORT_FUNCTION int WINAPI WvGetErrorStringFromEnum_W(int ErrorCode, wchar_t* pString, int MaxStringSize);
IMPORT_FUNCTION int WINAPI WvGetColorStringFromEnum_W(WV_COLOR ColorEnum, wchar_t* pString, int MaxStringSize);
IMPORT_FUNCTION int WINAPI  WvGetActivationStateStringFromEnum_W(WV_ACTIVATION_STATE StateEnum, wchar_t* pString, int MaxStringSize);
IMPORT_FUNCTION int WINAPI  WvGetSignalPresenceStringFromEnum_W(WV_SIGNAL_PRESENCE PresenceEnum, wchar_t* pString, int MaxStringSize);
IMPORT_FUNCTION int WINAPI  WvGetManifestationStringFromEnum_W(WV_SIGNAL_MANIFESTATION ManifestationEnum, wchar_t* pString, int MaxStringSize);
IMPORT_FUNCTION int WINAPI  WvGetAlarmKindStringFromEnum_W(WV_ALERT_KIND KindEnum, wchar_t* pString, int MaxStringSize);

/////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvStart -- Performs necessary initializations
//
//  Parameters:
//
//     pMajorRev        -- must point to an int that is set to WVAPI_MAJOR_REV (this routine will set it to the major version ID of the DLL)
//     pMinorRev        -- must point to an int that is set to WVAPI_MINOR_REV (this routine will set it to the minor version ID of the DLL)
//
//  NOTE:  If WvStart returns an error of WV_VERSION_MISMATCH, you can read the values
//         pointed to by MajorRev and MinorRev to see what the version of the DLL is
//
//  Example:
//
//     int MajorRev = WVAPI_MAJOR_REV;
//     int MinorRev = WVAPI_MINOR_REV;
//
//     int ReturnCode = WvStart(&MajorRev, &MinorRev);
//
//     if (ReturnCode != WV_SUCCESS) {
//        if (ReturnCode == WV_VERSION_MISMATCH) {
//           printf ("Version mismatch:  we're using version %d.%d, DLL is using version %d.%d",
//                    WVAPI_MAJOR_REV, WVAPI_MINOR_REV, MajorRev, MinorRev);
//        }
//     }
//
//
IMPORT_FUNCTION int WINAPI WvStart(int* pMajorRev, int* pMinorRev);
//
/////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvStop -- Performs necessary cleanup
//
//  Parameters:
//
//     None
//
//  Example:
//
//     int ReturnCode = WvStop();
//
IMPORT_FUNCTION int WINAPI WvStop();
//
/////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvListBeds -- Fills in a list of devices that are currently online at the Infinity Gateway server
//
//  Parameters:
//
//     pServerName   -- must contain the host name or IP address of the machine running the WinView server application
//     pUserName     -- must contain the user name for an authorized NT user account on the machine running the WinView server application
//     pPassword     -- must contain the password for an authorized NT user account on the machine running the WinView server application
//     pBedList      -- must point to a WV_BED_LIST structure that this routine will fill in
//     pNumberOfBeds -- must point to an int that this routine will set to the number of beds currently online at the WinView server application
//     pDomain       -- may contain the domain name of the user account. If empty, the gateway server will use attempt to find the user in its 
//                      primary domain, and if not available will also look in the local server domain.
//     devPref       -- may contain the device preference, i.e. WV_INFINITY_ONLY, WV_SDC_PREFERRED or WV_SDC_ONLY. Default is Infinity only
//
//  Example:
//
//     WV_BED_LIST        BedList;
//     int                NumberOfBeds;
//
//     int ReturnCode = WvListBeds("129.73.42.112", "guest", "password", &BedList, &NumberOfBeds, "", WV_SDC_PREFERRED);
//
IMPORT_FUNCTION int WINAPI WvListBeds_W(const wchar_t* pServerName, const wchar_t* pUserName, const wchar_t* pPassword,
    WV_BED_LIST_W* pBedList, int* pNumberOfBeds, const wchar_t* pDomain = 0, WV_DEVICE_PREFERENCE devPref = WV_INFINITY_ONLY);

/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
//  WvConnectEx -- Opens a connection to a bed
//
//  Parameters:
//
//     uniqueDirID  -- must be a unique identifier from WvListBeds entry.
//     pConnectID -- must point to a WV_CONNECT_ID that will be used to identify the bed connection in subsequent calls
//     devPref  -- defines the type of connection ( WV_INFINITY_ONLY, WV_SDC_PREFERRED, or WV_SDC_ONLY)
//     reqType -- defines the kind of data to be requested in the connection (WV_REQUEST_ALARMS_ONLY, WV_REQUEST_ALARMS_AND_PARAMS, WV_REQUEST_ALARMS_PARAMS_AND_WAVES)

IMPORT_FUNCTION int WINAPI WvConnectEx(UINT32 uniqueDirID, WV_CONNECT_ID* pConnectID, WV_DEVICE_PREFERENCE devPref = WV_SDC_PREFERRED, WV_REQUEST_TYPE reqType = WV_REQUEST_ALARMS_PARAMS_AND_WAVES);


/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvDisconnect -- Closes a connection to a bed
//
//  Parameters:
//
//     ConnectID     -- must point to a WV_CONNECT_ID that identifies the bed connection to close
//
//  Example:
//
//     WV_CONNECT_ID      ConnectID;
//
//     (after calling WvListBeds)
//
//     int ReturnCode = WvDisconnect(&BedLabel, &MulticastIP, &ConnectID);
//
//     (various API calls using ConnectID)
//
//     ReturnCode = WvDisconnect(ConnectID);
//
IMPORT_FUNCTION int WINAPI WvDisconnect(WV_CONNECT_ID ConnectID);
//
/////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvListConnections -- Lists beds that are currently connected
//
//  Parameters:
//
//     pBedList      -- must point to a WV_BED_LIST structure that this routine will fill in
//     pNumberOfBeds -- must point to an int that this routine will set to the number of beds currently connected
//
//  Example:
//
//     WV_BED_LIST        BedList;
//     int                NumberOfBeds;
//
//     int ReturnCode = WvListConnections(&BedList, &NumberOfBeds);
//
IMPORT_FUNCTION int WINAPI WvListConnections_W(WV_BED_LIST_W* pBedList, int* pNumberOfBeds);

//
/////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvGetHighestGradeAlarm -- Returns information about the highest grade, currently active alarm (if any)
//
//  Parameters:
//
//     ConnectID       -- must identify an open bed connection
//     pAlarmInfo      -- must point to a WV_ALARM_INFO structure that this routine will fill in
//
//  Note:  The value in the AlarmGrade field in the WV_ALARM_INFO structure is
//         not relevant if the value in the AlarmState field = WV_ALARM_STATE_INACTIVE
//
//  Example:
//
//     WV_CONNECT_ID  ConnectID;
//     WV_ALARM_INFO  AlarmInfo;
//
//     int ReturnCode = WvGetHighestGradeAlarm(ConnectID, &AlarmInfo);
//
IMPORT_FUNCTION int WINAPI WvGetHighestGradeAlarm_W(WV_CONNECT_ID ConnectID, WV_ALARM_INFO_W* pAlarmInfo);

//
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvGetAllAlarms -- Returns information all active or transitioning alarms
//
//  Parameters:
//
//     ConnectID       -- must identify an open bed connection
//     pAlarmInfo      -- must point to a WV_ALL_ALARMS_LIST structure that this routine will fill in
//     int             -- must refer to an integer that this routine will fill in with the number of alarms
//     BOOL            -- indicates if active alarms or alarm transitions are requested
//
//
//  Example:
//
//     WV_CONNECT_ID        ConnectID;
//     WV_ALL_ALARMS_LIST   AlarmList;
//     int                  numAlarms
//     
//
//     int ReturnCode = WvGetAllAlarms(ConnectID, &AlarmInfo, numAlarms);
//
IMPORT_FUNCTION int WINAPI WvGetAllAlarms_W(WV_CONNECT_ID ConnectID, WV_ALL_ALARMS_LIST_W* pAlarmInfo, int& numAlarms, BOOL activeAlarms);

//
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvListParameters -- Fills in a list of parameters that are currently on display at the bed
//
//  Parameters:
//
//     ConnectID           -- must identify an open bed connection
//     pParameterList      -- must point to a WV_PARAMETER_LIST structure that this routine will fill in
//     pNumberOfParameters -- must point to an int that this routine will set to the number of parameters on display at the bed currently connected to the WinView client application
//
//  Example:
//
//     WV_CONNECT_ID      ConnectID;
//     WV_PARAMETER_LIST  ParameterList;
//     int                NumberOfParameters;
//
//     int ReturnCode = WvListParameters(ConnectID, &ParameterList, &NumberOfParameters);
//
IMPORT_FUNCTION int WINAPI WvListParameters(WV_CONNECT_ID ConnectID, WV_PARAMETER_LIST* pParameterList, int* pNumberOfParameters);
/////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvDescribeParameter -- Fills in a structure with data for a given parameter
//
//  Parameters:
//
//    ConnectID             -- must identify an open bed connection
//    ParameterID           -- must identify the parameter of interest
//    pParameterDescription -- must point to a WV_PARAMETER_DESCRIPTION structure that this routine will fill in with the relevant information
//
//  NOTE:  WvDescribeParameter should be called after calling WvListParameters
//
//  Example:
//
//     WV_CONNECT_ID             ConnectID;
//     WV_PARAMETER_DESCRIPTION  ParameterDescription;
//
//     (after calling WvListParameters)
//
//     int ReturnCode = WvDescribeParameter(ConnectID, WV_PARAM_ECG_HR, &ParameterDescription);
//
IMPORT_FUNCTION int WINAPI WvDescribeParameter_W(WV_CONNECT_ID ConnectID, WV_PARAMETER_ID ParameterID, WV_PARAMETER_DESCRIPTION_W* pParameterDescription);

//
/////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvGetParameterValue -- Returns the current value (in text format) for a given parameter
//
//  Parameters:
//
//    ConnectID             -- must identify an open bed connection
//    ParameterID           -- must identify the parameter of interest
//    pParameterValue       -- must point to a buffer where this routine will copy the parameter value string
//    MaxParameterValueSize -- indicates the size of the buffer to be filled
//                             (this routine will write no more than this number of bytes to the buffer,
//                              and if the buffer is filled, will place a NULL character at the end of the buffer
//                              and will return WV_BUFFER_TOO_SMALL)
//
//  NOTE:  WvGetParameterValue should be called after calling WvListParameters
//
//  Example:
//
//     WV_CONNECT_ID      ConnectID;
//     GWCHAR              ParameterValue[WV_VALUE_SIZE];
//
//     (after calling WvListParameters)
//
//     int ReturnCode = WvGetParameterValue(ConnectID, WV_PARAM_ECG_HR, ParameterValue, sizeof(ParameterValue));
//
IMPORT_FUNCTION int WINAPI WvGetParameterValue_W(WV_CONNECT_ID ConnectID, WV_PARAMETER_ID ParameterID, wchar_t* pParameterValue, int MaxParameterValueSize);

//
/////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvListWaveforms -- Fills in a list of waveforms that are currently on display at the bed
//
//  Parameters:
//
//     ConnectID           -- must identify an open bed connection
//     pWaveformList       -- must point to a WV_WAVEFORM_LIST structure that this routine will fill in
//     pNumberOfWaveforms  -- must point to an int that this routine will set to the number of waveforms on display at the bed currently connected to the WinView client application
//
//  Example:
//
//     WV_CONNECT_ID      ConnectID;
//     WV_WAVEFORM_LIST   WaveformList;
//     int                NumberOfWaveforms;
//
//     int ReturnCode = WvListWaveforms(ConnectID, &WaveformList, &NumberOfWaveforms);
//
IMPORT_FUNCTION int WINAPI WvListWaveforms(WV_CONNECT_ID ConnectID, WV_WAVEFORM_LIST* pWaveformList, int* pNumberOfWaveforms);
//
/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvListAvailableWaveforms -- Fills in a list of all available waveforms from a bed
//
//  Parameters:
//
//     ConnectID           -- must identify an open bed connection
//     pWaveformList       -- must point to a WV_WAVEFORM_LIST structure that this routine will fill in
//     pNumberOfWaveforms  -- must point to an int that this routine will set to the number of waveforms on display at the bed currently connected to the WinView client application
//
//  Example:
//
//     WV_CONNECT_ID      ConnectID;
//     WV_WAVEFORM_LIST   WaveformList;
//     int                NumberOfWaveforms;
//
//     int ReturnCode = WvListAvailableWaveforms(ConnectID, &WaveformList, &NumberOfWaveforms);
//
IMPORT_FUNCTION int WINAPI WvListAvailableWaveforms(WV_CONNECT_ID ConnectID, WV_WAVEFORM_LIST* pWaveformList, int* pNumberOfWaveforms);
//
/////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvSetFilter -- Fills in a list of all waveforms to request from a bed
//
//  Parameters:
//
//     ConnectID           -- must identify an open bed connection
//     pWaveformList       -- must point to a WV_WAVEFORM_LIST structure that 
//                            contains the list of waveforms that are to be received
//     pNumberOfWaveforms  -- must point to an int that contains the number of waveforms 
//                            in the list. This number must not exceed WV_MAX_FILTERS. A value 
//                            of -1 disables the filter.
//
//  Example:
//
//     WV_CONNECT_ID      ConnectID;
//     WV_WAVEFORM_LIST   WaveformList;
//     int                NumberOfWaveforms;
//
//     int ReturnCode = WvSetFilter(ConnectID, &WaveformList, &NumberOfWaveforms);
//
IMPORT_FUNCTION int WINAPI WvSetFilter(WV_CONNECT_ID ConnectID, WV_WAVEFORM_LIST* pWaveformList, int* pNumberOfWaveforms);
//
/////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvDescribeWaveform -- Fills in a structure with data for a given waveform
//
//  Parameters:
//
//    ConnectID             -- must identify an open bed connection
//    WaveformID            -- must identify the waveform of interest
//    pWaveformDescription  -- must point to a WV_WAVEFORM_DESCRIPTION structure that this routine will fill in with the relevant information
//
//  NOTE:  WvDescribeWaveform should be called after calling WvListWaveforms
//
//  Example:
//
//     WV_CONNECT_ID            ConnectID;
//     WV_WAVEFORM_DESCRIPTION  WaveformDescription;
//
//     (after calling WvListWaveforms)
//
//     int ReturnCode = WvDescribeWaveform(ConnectID, WV_WAVE_ECG_LEAD_II, &WaveformDescription);
//
IMPORT_FUNCTION int WINAPI WvDescribeWaveform_W(WV_CONNECT_ID ConnectID, WV_WAVEFORM_ID WaveformID, WV_WAVEFORM_DESCRIPTION_W* pWaveformDescription);
//
/////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvGetWaveformSamples -- Fills a buffer with samples for the specified waveform
//
//  Parameters:
//
//    ConnectID                  -- must identify an open bed connection
//    WaveformID                 -- must identify the waveform of interest
//    pWaveformSamples           -- must point to a buffer of WV_WAVEFORM_SAMPLE structures that will hold the returned waveform samples
//    MaxSamplesRequested        -- specifies the maximum number of samples to return (in order to avoid overflowing the buffer pointed to by pWaveformSamples)
//    pNumberOfSamplesReturned   -- must point to an int that will hold the number of samples actually returned
//    pFirstSampleTimestamp      -- must point to a time_t that will hold the timestamp of the first returned sample
//    pFirstSampleSequenceNumber -- must point to an unsigned int that will hold the sequence number of the first returned sample
//    pMsecDiff                  -- must either be 0 or point to an integer that will be populated with a millisec offset for the 
//                                  first sample time. This will range from (-500,499). If you convert the first sample time to be in millisecs instead
//                                  of seconds, and then add in the msecDiff, then you get millisecond resolution for the first sample timestamp.
//
//  NOTE:  WvGetWaveformSamples should be called after calling WvListWaveforms
//
//  Example:
//
//     WV_CONNECT_ID       ConnectID;
//     WV_WAVEFORM_SAMPLE  WaveformSamples[WV_MAX_SAMPLES];
//     int                 NumberOfSamplesReturned;
//     time_t              FirstSampleTimestamp;
//     unsigned int        FirstSampleSequenceNumber;
//     int                 msecDiff;
//
//     (after calling WvListWaveforms)
//
//     int ReturnCode = WvGetWaveformSamples(ConnectID,
//                                           WV_WAVE_ECG_LEAD_II,
//                                           &WaveformSamples[0],
//                                           WV_MAX_SAMPLES,
//                                           &NumberOfSamplesReturned,
//                                           &FirstSampleTimestamp
//                                           &FirstSampleSequenceNumber);
//
IMPORT_FUNCTION int WINAPI WvGetWaveformSamples(WV_CONNECT_ID ConnectID, WV_WAVEFORM_ID WaveformID, WV_WAVEFORM_SAMPLE* pWaveformSamples,
    int MaxSamplesRequested, int* pNumberOfSamplesReturned, int32_t* pFirstSampleTimestamp,
    unsigned int* pFirstSampleSequenceNumber, int* pMsecDiff = 0, int64_t* pFirstSampleTickTime = 0);
//
/////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvGetVitalSignsReport -- Creates a vital signs report from the specified device
//                           in the specified buffer location
//
//  Parameters:
//
//    ConnectID       -- must identify an open bed connection
//    pReport         -- must point to a buffer that will be filled in with the vital signs report data
//    MaxReportSize   -- indicates the size of the buffer to be filled
//                       (this routine will write no more than this number of characters to the buffer,
//                        and if the buffer is filled, will place a NULL character at the end of the buffer
//                        and will return WV_BUFFER_TOO_SMALL)
//
//  Example:
//
//     WV_CONNECT_ID      ConnectID;
//     GWCHAR              VitalSignsReportBuffer[MAX_VITAL_SIGNS_REPORT_SIZE];
//
//     int ReturnCode = WvGetVitalSignsReport(ConnectID, &VitalSignsReportBuffer[0], sizeof(VitalSignsReportBuffer));
//
IMPORT_FUNCTION int WINAPI WvGetVitalSignsReport_W(WV_CONNECT_ID ConnectID, wchar_t* pReport, int MaxReportSize);
//
/////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvLocalTime -- Provides thread-safe access to the localtime() function
//                 in order to convert from time_t to struct tm
//
//  Parameters:
//
//    pTimeStamp  -- must point to a time_t value (such as a timestamp in the WV_PARAMETER_DESCRIPTION struct)
//    pLocalTime  -- must point to a struct tm value that will receive the converted time
//
//  Example:
//
//     time_t      TimeStamp;
//     struct tm   LocalTime;
//
//     DWORD ReturnCode = WvLocalTime(&TimeStamp, &LocalTime);
//
IMPORT_FUNCTION DWORD WINAPI WvLocalTime(int32_t* pTimeStamp, struct tm* pLocalTime);
//
/////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvGetHighestGradeVentAlarm -- Returns information about the highest grade Ventilator alarm, currently active (if any)
//
//  Parameters:
//
//     ConnectID       -- must identify an open bed connection
//     pAlarmInfo      -- must point to a WV_ALARM_INFO structure that this routine will fill in
//
//  Note:  The value in the AlarmGrade field in the WV_ALARM_INFO structure is
//         not relevant if the value in the AlarmState field = WV_ALARM_STATE_INACTIVE
//
//  Example:
//
//     WV_CONNECT_ID  ConnectID;
//     WV_ALARM_INFO  AlarmInfo;
//
//     int ReturnCode = WvGetHighestGradeVentAlarm(ConnectID, &AlarmInfo);
//
IMPORT_FUNCTION int WINAPI WvGetHighestGradeVentAlarm_W(WV_CONNECT_ID ConnectID, WV_ALARM_INFO_W* pAlarmInfo);

/////////////////////////////////////////////////////////////////////////////////////////
//
//  WvGetVentType -- Fills in the Vent Type from a bed (if any) 
//
//  Parameters:
//
//      ConnectID    -- must identify an open bed connection
//      pLabel       -- must point to a buffer where this routine will copy the vent type string
//      MaxLabelSize -- indicates the size of the buffer to be filled
//                      (this routine will write no more than this number of bytes to the buffer),
//         
//
//  Example:
//
//      WV_CONNECT_ID   ConnectID;
//      GWCHAR          ventTtype[MaxLabelSize];
//
//      int ReturnCode = WvGetVentType_A(WV_CONNECT_ID ConnectID, CHAR *pLabel, int MaxLabelSize);
//    
//
IMPORT_FUNCTION int WINAPI WvGetVentType_W(WV_CONNECT_ID ConnectID, wchar_t* pLabel, int MaxLabelSize);

#pragma pack( pop, EnterWvAPI )